{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewSong.js\";\nimport React, { useCallback, useReducer } from 'react';\nimport Input from '../../shared/components/FormElements/Input';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport './NewSong.css';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        input: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst NewSong = () => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      }\n    }\n  });\n  const changeHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  const descriptionChangeHandler = useCallback((id, value, isValid) => {}, []);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"song-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(3)],\n    errorText: \"Please enter a valid description!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }\n  }, changeHandler));\n};\n\nexport default NewSong;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewSong.js"],"names":["React","useCallback","useReducer","Input","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","input","value","NewSong","formState","dispatch","title","description","changeHandler","id","descriptionChangeHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,UAA7B,QAA+C,OAA/C;AACA,OAAOC,KAAP,MAAkB,4CAAlB;AAEA,SAAQC,iBAAR,EAA2BC,mBAA3B,QAAqD,8BAArD;AACA,OAAO,eAAP;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAChC,YAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC5BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACH,SAFD,MAEO;AACHH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACH;AACJ;;AAED,aAAO,EACH,GAAGN,KADA;AAEHO,QAAAA,KAAK,EAAE,EACH,GAAGP,KAAK,CAACK,MADN;AAEH,WAACJ,MAAM,CAACG,OAAR,GAAkB;AACdI,YAAAA,KAAK,EAAEP,MAAM,CAACO,KADA;AAEdF,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAFF;AAFf,SAFJ;AAQHA,QAAAA,OAAO,EAAEH;AARN,OAAP;;AAUJ;AACI,aAAOH,KAAP;AAtBR;AAwBH,CAzBD;;AA2BA,MAAMS,OAAO,GAAG,MAAM;AACnB,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAyBhB,UAAU,CAACI,WAAD,EAAc;AAClDM,IAAAA,MAAM,EAAE;AACJO,MAAAA,KAAK,EAAE;AACHJ,QAAAA,KAAK,EAAE,EADJ;AAEHF,QAAAA,OAAO,EAAE;AAFN,OADH;AAKJO,MAAAA,WAAW,EAAE;AACTL,QAAAA,KAAK,EAAE,EADE;AAETF,QAAAA,OAAO,EAAE;AAFA;AALT;AAD0C,GAAd,CAAzC;AAaC,QAAMQ,aAAa,GAAGpB,WAAW,CAAC,CAACqB,EAAD,EAAKP,KAAL,EAAYF,OAAZ,KAAwB;AACtDK,IAAAA,QAAQ,CAAC;AACLT,MAAAA,IAAI,EAAE,cADD;AAELM,MAAAA,KAAK,EAAEA,KAFF;AAESF,MAAAA,OAAO,EAAEA,OAFlB;AAE2BF,MAAAA,OAAO,EAAEW;AAFpC,KAAD,CAAR;AAIH,GALgC,EAK9B,EAL8B,CAAjC;AAMA,QAAMC,wBAAwB,GAAGtB,WAAW,CAAC,CAACqB,EAAD,EAAKP,KAAL,EAAYF,OAAZ,KAAwB,CAAE,CAA3B,EAA6B,EAA7B,CAA5C;AAEA,sBACI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,OAAV;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,KAAK,EAAC,OAHV;AAII,IAAA,UAAU,EAAE,CAACT,iBAAiB,EAAlB,CAJhB;AAKI,IAAA,SAAS,EAAC,6BALd;AAMI,IAAA,OAAO,EAAEiB,aANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eASI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,aAAV;AACI,IAAA,OAAO,EAAC,UADZ;AAEI,IAAA,KAAK,EAAC,aAFV;AAGI,IAAA,UAAU,EAAE,CAAChB,mBAAmB,CAAC,CAAD,CAApB,CAHhB;AAII,IAAA,SAAS,EAAC,mCAJd;AAKI,IAAA,OAAO,EAAEgB,aALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,eAeG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,aAAJ,CAfH,CADJ;AAmBH,CAzCD;;AA2CA,eAAeL,OAAf","sourcesContent":["import React, { useCallback, useReducer } from 'react';\nimport Input from '../../shared/components/FormElements/Input'\n\nimport {VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH} from '../../shared/util/validators'\nimport './NewSong.css';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n\n            return {\n                ...state,\n                input: {\n                    ...state.inputs,\n                    [action.inputId]: { \n                        value: action.value, \n                        isValid: action.isValid }\n                },\n                isValid: formIsValid\n            }\n        default:\n            return state;\n    }\n};\n\nconst NewSong = () => {\n   const [formState, dispatch] =  useReducer(formReducer, {\n        inputs: {\n            title: {\n                value: '',\n                isValid: false\n            },\n            description: {\n                value: '',\n                isValid: false\n            }\n        }\n    });\n\n    const changeHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE',\n            value: value, isValid: isValid, inputId: id\n        })\n    }, []);\n    const descriptionChangeHandler = useCallback((id, value, isValid) => {}, []);\n\n    return (\n        <form className=\"song-form\">\n            <Input id=\"title\"\n                element=\"input\"\n                type=\"text\" \n                label=\"Title\"\n                validators={[VALIDATOR_REQUIRE()]} \n                errorText='Please enter a valid title!'\n                onInput={changeHandler} />\n                \n            <Input id=\"description\"\n                element=\"textarea\"\n                label=\"Description\"\n                validators={[VALIDATOR_MINLENGTH(3)]} \n                errorText='Please enter a valid description!'\n                onInput={changeHandler}/>\n           <p>{changeHandler}</p>\n        </form>\n    );\n}\n\nexport default NewSong;"]},"metadata":{},"sourceType":"module"}