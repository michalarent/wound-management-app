{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/UpdateSong.js\";\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/UIElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport './NewSong.css';\nimport { useForm } from '../../shared/hooks/form-hook';\nconst DUMMY_SONGS = [{\n  id: 's1',\n  title: 'Jebać PiS',\n  description: 'One of the most important songs of 2020 and 2021',\n  image: 'https://i.ytimg.com/vi/FQq6Mwv_jpw/maxresdefault.jpg',\n  length: '3500',\n  creator: 'u1'\n}, {\n  id: 's2',\n  title: 'Jebać SąD',\n  description: 'One of the most important songs of 2020 and 2021',\n  image: 'https://pbs.twimg.com/media/EbXlmjgWsAEy0Ph.png',\n  length: '3500',\n  creator: 'u2'\n}];\n\nconst UpdatePlace = () => {\n  // extract value from route\n  const songId = useParams().songId;\n  const [formState, changeHandler] = useForm({\n    title: {\n      value: identifiedSong.title,\n      isValid: true\n    },\n    description: {\n      value: identifiedSong.description,\n      isValid: true\n    }\n  }, []);\n  const identifiedSong = DUMMY_SONGS.find(s => s.id === songId);\n\n  if (!identifiedSong) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, \"Could not find place!\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"song-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    onInput: () => {},\n    errorText: \"Enter valid title.\",\n    value: formState.inputs.title.value,\n    valid: ormState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"description\",\n    type: \"text\",\n    label: \"Description\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Enter valid description.\",\n    onInput: () => {},\n    value: ormState.inputs.description.value,\n    valid: ormState.inputs.description.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"UPDATE PLACE\"));\n};\n\nexport default UpdatePlace;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/UpdateSong.js"],"names":["React","useParams","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_SONGS","id","title","description","image","length","creator","UpdatePlace","songId","formState","changeHandler","value","identifiedSong","isValid","find","s","inputs","ormState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useParams} from 'react-router-dom'\n\nimport Input from '../../shared/components/FormElements/Input'\nimport Button from '../../shared/components/UIElements/Button'\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH} from '../../shared/util/validators';\n\n\n\nimport './NewSong.css';\nimport { useForm } from '../../shared/hooks/form-hook';\n\nconst DUMMY_SONGS = [\n    {\n        id: 's1',\n        title: 'Jebać PiS',\n        description: 'One of the most important songs of 2020 and 2021',\n        image: 'https://i.ytimg.com/vi/FQq6Mwv_jpw/maxresdefault.jpg',\n        length: '3500',\n        creator: 'u1'\n        \n    },\n    {\n        id: 's2',\n        title: 'Jebać SąD',\n        description: 'One of the most important songs of 2020 and 2021',\n        image: 'https://pbs.twimg.com/media/EbXlmjgWsAEy0Ph.png',\n        length: '3500',\n        creator: 'u2'\n        \n    },\n]\n\nconst UpdatePlace = () => {\n    // extract value from route\n    const songId = useParams().songId;\n\n    const [formState, changeHandler] =useForm({\n        title: {\n            value: identifiedSong.title,\n            isValid: true\n        },\n        description: {\n            value: identifiedSong.description,\n            isValid:true\n        }\n    \n    },[]);\n\n    const identifiedSong = DUMMY_SONGS.find(s => s.id === songId);\n\n    if (!identifiedSong) {\n        return (<div className=\"center\">\n            <h2>Could not find place!</h2>\n        </div>);\n    }\n    return <form className=\"song-form\">\n        <Input \n        id=\"title\" \n        element=\"input\"\n        type=\"text\"\n        label=\"Title\"\n        validators={[VALIDATOR_REQUIRE()]}\n        onInput={() => {}}\n        errorText=\"Enter valid title.\"\n        value={formState.inputs.title.value} \n        valid={ormState.inputs.title.isValid}\n        />\n        <Input \n        id=\"title\" \n        element=\"description\"\n        type=\"text\"\n        label=\"Description\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Enter valid description.\"\n        onInput={() => {}}\n        value={ormState.inputs.description.value}\n        valid={ormState.inputs.description.isValid} />\n        <Button type=\"submit\" disabled={true}>UPDATE PLACE</Button>\n    </form>\n\n};\n\nexport default UpdatePlace;"]},"metadata":{},"sourceType":"module"}