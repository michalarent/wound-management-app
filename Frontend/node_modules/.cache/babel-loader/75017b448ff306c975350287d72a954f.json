{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/components/WoundTable.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\nimport Modal from \"@material-ui/core/Modal\";\nimport \"./WoundTable.css\";\nimport WoundItem from \"./WoundItem\";\nconst useStyles = makeStyles(theme => ({\n  table: {\n    minWidth: 650\n  },\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3) // top: `${top}%`,\n    // margin: \"auto\",\n\n  }\n}));\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nvar rows = [];\n\nconst WoundTable = () => {\n  //   this.state = {\n  //     data: \"\",\n  //   };\n  const auth = useContext(AuthContext);\n  const userId = useParams().userId;\n  const [loadedWounds, setLoadedWounds] = useState([]);\n  const [isVisible, setIsVisible] = useState(false);\n  const [selectedRow, setSelectedRow] = useState({});\n  useEffect(() => {\n    const sendRequest = async () => {\n      const response = await fetch(`http://localhost:5000/api/wounds/user/${userId}`);\n      const responseData = await response.json();\n\n      if (!response.ok) {} else {\n        setLoadedWounds(responseData.wound);\n        console.log(`Row below`);\n      }\n    };\n\n    sendRequest();\n  }, []);\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = selected => {\n    setSelectedRow(selected);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleClick = (id, column) => {\n    return event => {\n      console.log(`You clicked on row with id ${id}, in column ${column}.`);\n    };\n  };\n\n  const classes = useStyles();\n  const columns = [{\n    field: \"id\",\n    headerName: \"ID\",\n    width: 200\n  }, {\n    field: \"name\",\n    headerName: \"First name\",\n    width: 130\n  }, {\n    field: \"bodyPart\",\n    headerName: \"Body part\",\n    width: 130\n  }, {\n    field: \"description\",\n    headerName: \"Description\",\n    description: \"This column has a value getter and is not sortable.\",\n    sortable: false,\n    width: 160\n  }, {\n    field: \"dateCreated\"\n  }];\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableContainer, {\n    component: Paper,\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, \"Body Part\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, \"Last Edited\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, \"Created On\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, loadedWounds.map((row, i) => /*#__PURE__*/React.createElement(TableRow, {\n    onClick: handleOpen(row),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, row.name), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, row.bodyPart), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, row.description), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, row.dateLastEdited), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, row.dateCreated), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(React.Fragment, null))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"table\",\n    style: {\n      height: 400,\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    rows: loadedWounds,\n    columns: columns,\n    pageSize: 5 //   checkboxSelection\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default WoundTable;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/components/WoundTable.js"],"names":["React","useState","useEffect","useParams","useContext","AuthContext","makeStyles","Button","DataGrid","useTheme","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","PageviewIcon","Modal","WoundItem","useStyles","theme","table","minWidth","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","rand","Math","round","random","getModalStyle","top","left","transform","rows","WoundTable","auth","userId","loadedWounds","setLoadedWounds","isVisible","setIsVisible","selectedRow","setSelectedRow","sendRequest","response","fetch","responseData","json","ok","wound","console","log","open","setOpen","handleOpen","selected","handleClose","handleClick","id","column","event","classes","columns","field","headerName","description","sortable","map","row","i","name","bodyPart","dateLastEdited","dateCreated","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\n\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\nimport Modal from \"@material-ui/core/Modal\";\n\nimport \"./WoundTable.css\";\nimport WoundItem from \"./WoundItem\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    // top: `${top}%`,\n    // margin: \"auto\",\n  },\n}));\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nvar rows = [];\n\nconst WoundTable = () => {\n  //   this.state = {\n  //     data: \"\",\n  //   };\n  const auth = useContext(AuthContext);\n  const userId = useParams().userId;\n  const [loadedWounds, setLoadedWounds] = useState([]);\n  const [isVisible, setIsVisible] = useState(false);\n  const [selectedRow, setSelectedRow] = useState({});\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      const response = await fetch(\n        `http://localhost:5000/api/wounds/user/${userId}`\n      );\n      const responseData = await response.json();\n      if (!response.ok) {\n      } else {\n        setLoadedWounds(responseData.wound);\n        console.log(`Row below`);\n      }\n    };\n    sendRequest();\n  }, []);\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = (selected) => {\n    setSelectedRow(selected);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleClick = (id, column) => {\n    return (event) => {\n      console.log(`You clicked on row with id ${id}, in column ${column}.`);\n    };\n  };\n\n  const classes = useStyles();\n\n  const columns = [\n    { field: \"id\", headerName: \"ID\", width: 200 },\n    { field: \"name\", headerName: \"First name\", width: 130 },\n    { field: \"bodyPart\", headerName: \"Body part\", width: 130 },\n    {\n      field: \"description\",\n      headerName: \"Description\",\n      description: \"This column has a value getter and is not sortable.\",\n      sortable: false,\n      width: 160,\n    },\n    { field: \"dateCreated\" },\n  ];\n\n  return (\n    <>\n      <TableContainer component={Paper} className=\"table\">\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell align=\"right\">Body Part</TableCell>\n              <TableCell align=\"right\">Description</TableCell>\n              <TableCell align=\"right\">Last Edited</TableCell>\n              <TableCell align=\"right\">Created On</TableCell>\n              <TableCell align=\"right\"></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {loadedWounds.map((row, i) => (\n              <TableRow onClick={handleOpen(row)}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell align=\"right\">{row.bodyPart}</TableCell>\n                <TableCell align=\"right\">{row.description}</TableCell>\n                <TableCell align=\"right\">\n                  {row.dateLastEdited}\n                </TableCell>\n                <TableCell align=\"right\">{row.dateCreated}</TableCell>\n                <TableCell align=\"right\">\n                  <Button type=\"button\" />\n                  <>\n                    {/* <Modal\n                      open={open}\n                      onClose={handleClose}\n                      aria-labelledby=\"simple-modal-title\"\n                      aria-describedby=\"simple-modal-description\"\n                    >\n                      <p>{row.id}</p>\n                    </Modal> */}\n                  </>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <div className=\"table\" style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          rows={loadedWounds}\n          columns={columns}\n          pageSize={5}\n          //   checkboxSelection\n        />\n      </div>\n    </>\n  );\n};\n\nexport default WoundTable;\n"]},"metadata":{},"sourceType":"module"}