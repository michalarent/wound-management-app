{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewSong.js\";\nimport React from \"react\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH, VALIDATOR_URL } from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport \"./NewSong.css\";\n\nconst NewSong = () => {\n  const [formState, changeHandler] = useForm({\n    title: {\n      value: \"\",\n      isValid: false\n    },\n    artist: {\n      value: \"\",\n      isValid: false\n    },\n    description: {\n      value: \"\",\n      isValid: false\n    },\n    url: {\n      value: \"\",\n      isValid: false\n    }\n  }, false); // send data to the server!\n\n  const submitHandler = event => {\n    event.preventDefault();\n    useEffect(() => {\n      const sendRequest = async () => {\n        const response = await fetch(\"http://localhost:5000/api/songs\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            title: formState.inputs.title.value,\n            artist: formState.inputs.artist.value,\n            description: formState.inputs.description.value,\n            url: formState.inputs.url.value\n          })\n        });\n        const responseData = await response.json();\n\n        if (!response.ok) {} else {\n          setLoadedUsers(responseData.users);\n        }\n      };\n\n      sendRequest();\n    }, []); // check if json is ok\n\n    console.log(formState.inputs);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"song-form\",\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"artist\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Artist\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid artist!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(3)],\n    errorText: \"Please enter a valid description!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"url\",\n    element: \"input\",\n    label: \"Song URL\",\n    validators: [VALIDATOR_URL()],\n    errorText: \"Please enter a valid URL! Only links from Spotify, Soundcloud and Youtube are accepted!!!!!!!!!!!!!!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, \"ADD SONG\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"Is the form valid? \", String(formState.isValid)));\n};\n\nexport default NewSong;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewSong.js"],"names":["React","Input","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_URL","Button","useForm","NewSong","formState","changeHandler","title","value","isValid","artist","description","url","submitHandler","event","preventDefault","useEffect","sendRequest","response","fetch","method","headers","body","JSON","stringify","inputs","responseData","json","ok","setLoadedUsers","users","console","log","String"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Input from \"../../shared/components/FormElements/Input\";\n\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_URL,\n} from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\n\nimport \"./NewSong.css\";\n\nconst NewSong = () => {\n  const [formState, changeHandler] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      artist: {\n          value: \"\",\n          isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n      url: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  // send data to the server!\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    useEffect(() => {\n      const sendRequest = async () => {\n        const response = await fetch(\"http://localhost:5000/api/songs\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              title: formState.inputs.title.value,\n              artist: formState.inputs.artist.value,\n              description: formState.inputs.description.value,\n              url: formState.inputs.url.value\n            }),\n          });\n\n        const responseData = await response.json();\n        if (!response.ok) {\n        } else {\n          setLoadedUsers(responseData.users);\n        }\n      };\n      sendRequest();\n    }, []);\n\n    // check if json is ok\n    console.log(formState.inputs);\n  };\n\n  return (\n    <form className=\"song-form\" onSubmit={submitHandler}>\n      <Input\n        id=\"title\"\n        element=\"input\"\n        type=\"text\"\n        label=\"Title\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Please enter a valid title!\"\n        onInput={changeHandler}\n      />\n      <Input\n        id=\"artist\"\n        element=\"input\"\n        type=\"text\"\n        label=\"Artist\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Please enter a valid artist!\"\n        onInput={changeHandler}\n      />\n      <Input\n        id=\"description\"\n        element=\"textarea\"\n        label=\"Description\"\n        validators={[VALIDATOR_MINLENGTH(3)]}\n        errorText=\"Please enter a valid description!\"\n        onInput={changeHandler}\n      />\n      <Input\n        id=\"url\"\n        element=\"input\"\n        label=\"Song URL\"\n        validators={[VALIDATOR_URL()]}\n        errorText=\"Please enter a valid URL! Only links from Spotify, Soundcloud and Youtube are accepted!!!!!!!!!!!!!!\"\n        onInput={changeHandler}\n      />\n\n      <Button type=\"submit\" disabled={!formState.isValid}>\n        ADD SONG\n      </Button>\n      <p>Is the form valid? {String(formState.isValid)}</p>\n    </form>\n  );\n};\n\nexport default NewSong;\n"]},"metadata":{},"sourceType":"module"}