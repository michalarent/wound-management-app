{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewWound.js\";\nimport React, { useContext } from \"react\"; // import Input from \"../../shared/components/FormElements/Input\";\n\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH, VALIDATOR_URL } from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { FormControl, InputLabel, FormHelperText, Input } from \"@material-ui/core\";\nimport \"./NewWound.css\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\n\nconst NewWound = () => {\n  const auth = useContext(AuthContext);\n  const classes = useStyles();\n  const [formState, changeHandler] = useForm({\n    name: {\n      value: \"\",\n      isValid: false\n    },\n    bodyPart: {\n      value: \"\",\n      isValid: false\n    },\n    description: {\n      value: \"\",\n      isValid: false\n    },\n    dateLastEdited: {\n      value: \"\",\n      isValid: true\n    },\n    dateCreated: {\n      value: \"\",\n      isValid: true\n    }\n  }, false); // send data to the server!\n\n  const submitHandler = async event => {\n    event.preventDefault();\n    console.log(auth.userId);\n    const response = await fetch(\"http://localhost:5000/api/wounds\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: formState.inputs.name.value,\n        bodyPart: formState.inputs.bodyPart.value,\n        description: formState.inputs.description.value,\n        dateLastEdited: Date.now(),\n        dateCreated: Date.now(),\n        owner: auth.userId\n      })\n    });\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      throw new Error(responseData.message);\n    }\n\n    console.log(responseData); // check if json is ok\n\n    console.log(formState.inputs);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    defaultValue: \"Hello world\",\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Placeholder\",\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    defaultValue: \"Disabled\",\n    disabled: true,\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    defaultValue: \"Error\",\n    error: true,\n    inputProps: {\n      'aria-label': 'description'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default NewWound;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewWound.js"],"names":["React","useContext","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_URL","Button","useForm","AuthContext","FormControl","InputLabel","FormHelperText","Input","useStyles","makeStyles","theme","root","margin","spacing","NewWound","auth","classes","formState","changeHandler","name","value","isValid","bodyPart","description","dateLastEdited","dateCreated","submitHandler","event","preventDefault","console","log","userId","response","fetch","method","headers","body","JSON","stringify","inputs","Date","now","owner","responseData","json","ok","Error","message"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\n// import Input from \"../../shared/components/FormElements/Input\";\n\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_URL,\n} from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { FormControl, InputLabel, FormHelperText, Input } from \"@material-ui/core\";\n\nimport \"./NewWound.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst NewWound = () => {\n  const auth = useContext(AuthContext);\n  const classes = useStyles();\n\n  const [formState, changeHandler] = useForm(\n    {\n      name: {\n        value: \"\",\n        isValid: false,\n      },\n      bodyPart: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n      dateLastEdited: {\n        value: \"\",\n        isValid: true,\n      },\n      dateCreated: {\n        value: \"\",\n        isValid: true,\n      },\n    },\n    false\n  );\n\n  // send data to the server!\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    console.log(auth.userId);\n\n    const response = await fetch(\"http://localhost:5000/api/wounds\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: formState.inputs.name.value,\n        bodyPart: formState.inputs.bodyPart.value,\n        description: formState.inputs.description.value,\n        dateLastEdited: Date.now(),\n        dateCreated: Date.now(),\n        owner: auth.userId,\n      }),\n    });\n\n    const responseData = await response.json();\n    if (!response.ok) {\n      throw new Error(responseData.message);\n    }\n    console.log(responseData);\n\n    // check if json is ok\n    console.log(formState.inputs);\n  };\n\n  return (\n    <>\n      {/* <form className=\"wound-form\" onSubmit={submitHandler}>\n        <p>\n          This wound was created on: {formState.dateCreated} and last edited on:{\" \"}\n          {formState.dateLastEdited}.\n        </p>\n        <Input\n          id=\"name\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Name\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"bodyPart\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Body Part\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid body part!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          x\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(3)]}\n          errorText=\"Please enter a valid description!\"\n          onInput={changeHandler}\n        />\n\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD WOUND\n        </Button>\n        <p>Is the form valid? {String(formState.isValid)}</p>\n      </form> */}\n      <form className={classes.root} noValidate autoComplete=\"off\">\n      <Input defaultValue=\"Hello world\" inputProps={{ 'aria-label': 'description' }} />\n      <Input placeholder=\"Placeholder\" inputProps={{ 'aria-label': 'description' }} />\n      <Input defaultValue=\"Disabled\" disabled inputProps={{ 'aria-label': 'description' }} />\n      <Input defaultValue=\"Error\" error inputProps={{ 'aria-label': 'description' }} />\n    </form>\n    </>\n  );\n};\n\nexport default NewWound;\n"]},"metadata":{},"sourceType":"module"}