{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/components/WoundTable.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\nimport Modal from \"@material-ui/core/Modal\";\nimport \"./WoundTable.css\";\nimport WoundItem from \"./WoundItem\";\nconst useStyles = makeStyles(theme => ({\n  table: {\n    minWidth: 650\n  },\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3) // top: `${top}%`,\n    // margin: \"auto\",\n\n  }\n}));\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nvar rows = [];\n\nconst WoundTable = () => {\n  const auth = useContext(AuthContext);\n  const userId = useParams().userId;\n  const [loadedWounds, setLoadedWounds] = useState([]);\n  useEffect(() => {\n    const sendRequest = async () => {\n      const response = await fetch(`http://localhost:5000/api/wounds/user/${userId}`);\n      const responseData = await response.json();\n      console.log(responseData);\n\n      if (!response.ok) {} else {\n        setLoadedWounds(responseData.wound);\n        var rows = responseData.wound;\n        console.log(\"rows below\");\n        console.log(rows);\n      }\n    };\n\n    sendRequest();\n  }, []);\n  const classes = useStyles();\n\n  const handleOpen = id => {\n    this.setState({\n      [`setOpen-${id}`]: true\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n  return /*#__PURE__*/React.createElement(TableContainer, {\n    component: Paper,\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"Body Part\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Last Edited\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Created On\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, loadedWounds.map(loadedWound => /*#__PURE__*/React.createElement(TableRow, {\n    key: loadedWound.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, loadedWound.name, console.log(loadedWound)), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, loadedWound.bodyPart), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, loadedWound.description), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, loadedWound.dateLastEdited), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, loadedWound.dateCreated), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: () => handleOpen(loadedWound.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, \"Open Modal\"), /*#__PURE__*/React.createElement(Modal, {\n    open: this.state[`setOpen-${loadedWound.id}`],\n    onClose: handleClose,\n    \"aria-labelledby\": \"simple-modal-title\",\n    \"aria-describedby\": \"simple-modal-description\",\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(WoundItem, {\n    id: loadedWound.id,\n    name: loadedWound.name,\n    bodyPart: loadedWound.bodyPart,\n    description: loadedWound.description,\n    dateCreated: loadedWound.dateCreated,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  })))))))));\n};\n\nexport default WoundTable;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/components/WoundTable.js"],"names":["React","useState","useEffect","useParams","useContext","AuthContext","makeStyles","Button","useTheme","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","PageviewIcon","Modal","WoundItem","useStyles","theme","table","minWidth","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","rand","Math","round","random","getModalStyle","top","left","transform","rows","WoundTable","auth","userId","loadedWounds","setLoadedWounds","sendRequest","response","fetch","responseData","json","console","log","ok","wound","classes","handleOpen","id","setState","handleClose","setOpen","modalStyle","open","map","loadedWound","name","bodyPart","description","dateLastEdited","dateCreated","state","display","alignItems","justifyContent"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,mCAA5B;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAEA,OAAO,kBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,SAAS,GAAGb,UAAU,CAAEc,KAAD,KAAY;AACvCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GADgC;AAIvCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,UADL;AAELC,IAAAA,KAAK,EAAE,GAFF;AAGLC,IAAAA,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,UAAd,CAAyBL,KAHrC;AAILM,IAAAA,MAAM,EAAE,gBAJH;AAKLC,IAAAA,SAAS,EAAEV,KAAK,CAACW,OAAN,CAAc,CAAd,CALN;AAMLC,IAAAA,OAAO,EAAEZ,KAAK,CAACa,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,CANJ,CAOL;AACA;;AARK;AAJgC,CAAZ,CAAD,CAA5B;;AAgBA,SAASC,IAAT,GAAgB;AACd,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,EAAxC;AACD;;AAED,SAASC,aAAT,GAAyB;AACvB,QAAMC,GAAG,GAAG,KAAKL,IAAI,EAArB;AACA,QAAMM,IAAI,GAAG,KAAKN,IAAI,EAAtB;AAEA,SAAO;AACLK,IAAAA,GAAG,EAAG,GAAEA,GAAI,GADP;AAELC,IAAAA,IAAI,EAAG,GAAEA,IAAK,GAFT;AAGLC,IAAAA,SAAS,EAAG,cAAaF,GAAI,OAAMC,IAAK;AAHnC,GAAP;AAKD;;AAED,IAAIE,IAAI,GAAG,EAAX;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,IAAI,GAAGxC,UAAU,CAACC,WAAD,CAAvB;AACA,QAAMwC,MAAM,GAAG1C,SAAS,GAAG0C,MAA3B;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC9C,QAAQ,CAAC,EAAD,CAAhD;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8C,WAAW,GAAG,YAAY;AAC9B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,yCAAwCL,MAAO,EADtB,CAA5B;AAGA,YAAMM,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;;AACA,UAAI,CAACF,QAAQ,CAACM,EAAd,EAAkB,CACjB,CADD,MACO;AACLR,QAAAA,eAAe,CAACI,YAAY,CAACK,KAAd,CAAf;AACA,YAAId,IAAI,GAAGS,YAAY,CAACK,KAAxB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACD;AACF,KAbD;;AAcAM,IAAAA,WAAW;AACZ,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,QAAMS,OAAO,GAAGtC,SAAS,EAAzB;;AAEA,QAAMuC,UAAU,GAAIC,EAAD,IAAQ;AACzB,SAAKC,QAAL,CAAc;AACZ,OAAE,WAAUD,EAAG,EAAf,GAAmB;AADP,KAAd;AAGD,GAJD;;AAMA,QAAME,WAAW,GAAG,MAAM;AACxBC,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,QAAM,CAACC,UAAD,IAAe9D,QAAQ,CAACqC,aAAD,CAA7B;AACA,QAAM,CAAC0B,IAAD,EAAOF,OAAP,IAAkB7D,QAAQ,CAAC,KAAD,CAAhC;AAEA,sBACE,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAEc,KAA3B;AAAkC,IAAA,SAAS,EAAC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAE0C,OAAO,CAACpC,KAA1B;AAAiC,kBAAW,cAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,eAGE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,eAIE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF,eAKE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,eAME,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF,CADF,eAWE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGyB,YAAY,CAACmB,GAAb,CAAkBC,WAAD,iBAChB,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,WAAW,CAACP,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,IAArB;AAA0B,IAAA,KAAK,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,WAAW,CAACC,IADf,EAEGd,OAAO,CAACC,GAAR,CAAYY,WAAZ,CAFH,CADF,eAKE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BA,WAAW,CAACE,QAAtC,CALF,eAME,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BF,WAAW,CAACG,WAAtC,CANF,eAOE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BH,WAAW,CAACI,cAAtC,CAPF,eAQE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BJ,WAAW,CAACK,WAAtC,CARF,eASE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAE,MAAMb,UAAU,CAACQ,WAAW,CAACP,EAAb,CAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAE,KAAKa,KAAL,CAAY,WAAUN,WAAW,CAACP,EAAG,EAArC,CADR;AAEE,IAAA,OAAO,EAAEE,WAFX;AAGE,uBAAgB,oBAHlB;AAIE,wBAAiB,0BAJnB;AAKE,IAAA,KAAK,EAAE;AACLY,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,UAAU,EAAE,QAFP;AAGLC,MAAAA,cAAc,EAAE;AAHX,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,EAAE,EAAET,WAAW,CAACP,EADlB;AAEE,IAAA,IAAI,EAAEO,WAAW,CAACC,IAFpB;AAGE,IAAA,QAAQ,EAAED,WAAW,CAACE,QAHxB;AAIE,IAAA,WAAW,EAAEF,WAAW,CAACG,WAJ3B;AAKE,IAAA,WAAW,EAAEH,WAAW,CAACK,WAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAXF,CAPF,CATF,CADD,CADH,CAXF,CADF,CADF;AA2DD,CAhGD;;AAkGA,eAAe5B,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\nimport Modal from \"@material-ui/core/Modal\";\n\nimport \"./WoundTable.css\";\nimport WoundItem from \"./WoundItem\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    // top: `${top}%`,\n    // margin: \"auto\",\n  },\n}));\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nvar rows = [];\n\nconst WoundTable = () => {\n  const auth = useContext(AuthContext);\n  const userId = useParams().userId;\n  const [loadedWounds, setLoadedWounds] = useState([]);\n  useEffect(() => {\n    const sendRequest = async () => {\n      const response = await fetch(\n        `http://localhost:5000/api/wounds/user/${userId}`\n      );\n      const responseData = await response.json();\n      console.log(responseData);\n      if (!response.ok) {\n      } else {\n        setLoadedWounds(responseData.wound);\n        var rows = responseData.wound;\n        console.log(\"rows below\");\n        console.log(rows);\n      }\n    };\n    sendRequest();\n  }, []);\n\n  const classes = useStyles();\n\n  const handleOpen = (id) => {\n    this.setState({\n      [`setOpen-${id}`]: true,\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n\n  return (\n    <TableContainer component={Paper} className=\"table\">\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell align=\"right\">Body Part</TableCell>\n            <TableCell align=\"right\">Description</TableCell>\n            <TableCell align=\"right\">Last Edited</TableCell>\n            <TableCell align=\"right\">Created On</TableCell>\n            <TableCell align=\"right\"></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {loadedWounds.map((loadedWound) => (\n            <TableRow key={loadedWound.id}>\n              <TableCell component=\"th\" scope=\"row\">\n                {loadedWound.name}\n                {console.log(loadedWound)}\n              </TableCell>\n              <TableCell align=\"right\">{loadedWound.bodyPart}</TableCell>\n              <TableCell align=\"right\">{loadedWound.description}</TableCell>\n              <TableCell align=\"right\">{loadedWound.dateLastEdited}</TableCell>\n              <TableCell align=\"right\">{loadedWound.dateCreated}</TableCell>\n              <TableCell align=\"right\">\n                <Button\n                  type=\"button\"\n                  onClick={() => handleOpen(loadedWound.id)}\n                >\n                  Open Modal\n                </Button>\n                <Modal\n                  open={this.state[`setOpen-${loadedWound.id}`]}\n                  onClose={handleClose}\n                  aria-labelledby=\"simple-modal-title\"\n                  aria-describedby=\"simple-modal-description\"\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  <div>\n                    <WoundItem\n                      id={loadedWound.id}\n                      name={loadedWound.name}\n                      bodyPart={loadedWound.bodyPart}\n                      description={loadedWound.description}\n                      dateCreated={loadedWound.dateCreated}\n                    />\n                  </div>\n                </Modal>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default WoundTable;\n"]},"metadata":{},"sourceType":"module"}