{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/users/pages/Auth.js\";\nimport React, { useState, useContext } from \"react\";\nimport { VALIDATOR_EMAIL, VALIDATOR_REQUIRE, VALIDATOR_MAXLENGTH } from \"../../shared/util/validators\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport \"./Auth.css\";\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, changeHandler, setFormData] = useForm({\n    name: {\n      value: \"\",\n      isValid: false\n    },\n    email: {\n      value: \"a@b.c\",\n      isValid: false\n    },\n    password: {\n      value: \"\",\n      isValid: false\n    }\n  }, false); // send data to the server!\n\n  const submitHandler = async event => {\n    event.preventDefault(); // check if json is ok\n\n    if (isLoginMode) {\n      try {\n        const responseData = await fetch('http://localhost:5000/api/users/login', 'POST', JSON.stringify({\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    } else {\n      try {\n        const responseData = await sendRequest('http://localhost:5000/api/users/signup', 'POST', JSON.stringify({\n          name: formState.inputs.name.value,\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    }\n  };\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({\n        name: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({ ...formState.inputs,\n        name: {\n          value: \"\",\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: \"authentication\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, !isLoginMode && /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Your name\",\n    validators: [VALIDATOR_REQUIRE],\n    errorText: \"Please enter your name\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"email\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Email\",\n    validators: [VALIDATOR_REQUIRE(), VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid email!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"password\",\n    element: \"input\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_REQUIRE(), VALIDATOR_MAXLENGTH(100)],\n    errorText: \"Please enter a valid password!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, isLoginMode ? \"LOGIN\" : \"SIGNUP\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, auth.isLoggedIn), /*#__PURE__*/React.createElement(Button, {\n    onClick: switchModeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"Switch\"));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/users/pages/Auth.js"],"names":["React","useState","useContext","VALIDATOR_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MAXLENGTH","Input","useForm","Button","Card","AuthContext","useHttpClient","Auth","auth","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","formState","changeHandler","setFormData","name","value","isValid","email","password","submitHandler","event","preventDefault","responseData","fetch","JSON","stringify","inputs","login","user","id","err","switchModeHandler","undefined","prevMode","isLoggedIn"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SACEC,eADF,EAEEC,iBAFF,EAGEC,mBAHF,QAIO,8BAJP;AAKA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AACA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AAEA,OAAO,YAAP;;AACA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,IAAI,GAAGX,UAAU,CAACQ,WAAD,CAAvB;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,EAA9C;AACA,QAAM;AAAEe,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAgDR,aAAa,EAAnE;AACA,QAAM,CAACS,SAAD,EAAYC,aAAZ,EAA2BC,WAA3B,IAA0Cf,OAAO,CACrD;AACEgB,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,OAAO,EAAE;AAFL,KADR;AAKEC,IAAAA,KAAK,EAAE;AACLF,MAAAA,KAAK,EAAE,OADF;AAELC,MAAAA,OAAO,EAAE;AAFJ,KALT;AASEE,IAAAA,QAAQ,EAAE;AACRH,MAAAA,KAAK,EAAE,EADC;AAERC,MAAAA,OAAO,EAAE;AAFD;AATZ,GADqD,EAerD,KAfqD,CAAvD,CAJiB,CAsBjB;;AACA,QAAMG,aAAa,GAAG,MAAOC,KAAP,IAAiB;AACrCA,IAAAA,KAAK,CAACC,cAAN,GADqC,CAErC;;AAGA,QAAIhB,WAAJ,EAAiB;AACb,UAAI;AACF,cAAMiB,YAAY,GAAG,MAAMC,KAAK,CAC9B,uCAD8B,EAE9B,MAF8B,EAG9BC,IAAI,CAACC,SAAL,CAAe;AACbR,UAAAA,KAAK,EAAEN,SAAS,CAACe,MAAV,CAAiBT,KAAjB,CAAuBF,KADjB;AAEbG,UAAAA,QAAQ,EAAEP,SAAS,CAACe,MAAV,CAAiBR,QAAjB,CAA0BH;AAFvB,SAAf,CAH8B,EAO9B;AACE,0BAAgB;AADlB,SAP8B,CAAhC;AAWAX,QAAAA,IAAI,CAACuB,KAAL,CAAWL,YAAY,CAACM,IAAb,CAAkBC,EAA7B;AACD,OAbD,CAaE,OAAOC,GAAP,EAAY,CAAE;AACjB,KAfH,MAeS;AACL,UAAI;AACF,cAAMR,YAAY,GAAG,MAAMb,WAAW,CACpC,wCADoC,EAEpC,MAFoC,EAGpCe,IAAI,CAACC,SAAL,CAAe;AACbX,UAAAA,IAAI,EAAEH,SAAS,CAACe,MAAV,CAAiBZ,IAAjB,CAAsBC,KADf;AAEbE,UAAAA,KAAK,EAAEN,SAAS,CAACe,MAAV,CAAiBT,KAAjB,CAAuBF,KAFjB;AAGbG,UAAAA,QAAQ,EAAEP,SAAS,CAACe,MAAV,CAAiBR,QAAjB,CAA0BH;AAHvB,SAAf,CAHoC,EAQpC;AACE,0BAAgB;AADlB,SARoC,CAAtC;AAaAX,QAAAA,IAAI,CAACuB,KAAL,CAAWL,YAAY,CAACM,IAAb,CAAkBC,EAA7B;AACD,OAfD,CAeE,OAAOC,GAAP,EAAY,CAAE;AACjB;AACJ,GAtCD;;AAwCA,QAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAI,CAAC1B,WAAL,EAAkB;AAChBQ,MAAAA,WAAW,CACT;AAAEC,QAAAA,IAAI,EAAEkB;AAAR,OADS,EAETrB,SAAS,CAACe,MAAV,CAAiBT,KAAjB,CAAuBD,OAAvB,IAAkCL,SAAS,CAACe,MAAV,CAAiBR,QAAjB,CAA0BF,OAFnD,CAAX;AAID,KALD,MAKO;AACLH,MAAAA,WAAW,CACT,EACE,GAAGF,SAAS,CAACe,MADf;AAEEZ,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAE,EADH;AAEJC,UAAAA,OAAO,EAAE;AAFL;AAFR,OADS,EAQT,KARS,CAAX;AAUD;;AACDV,IAAAA,cAAc,CAAE2B,QAAD,IAAc,CAACA,QAAhB,CAAd;AACD,GAnBD;;AAqBA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,QAAQ,EAAEd,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACd,WAAD,iBACC,oBAAC,KAAD;AACE,IAAA,OAAO,EAAC,OADV;AAEE,IAAA,EAAE,EAAC,MAFL;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,KAAK,EAAC,WAJR;AAKE,IAAA,UAAU,EAAE,CAACV,iBAAD,CALd;AAME,IAAA,SAAS,EAAC,wBANZ;AAOE,IAAA,OAAO,EAAEiB,aAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAYE,oBAAC,KAAD;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,OAAO,EAAC,OAFV;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,KAAK,EAAC,OAJR;AAKE,IAAA,UAAU,EAAE,CAACjB,iBAAiB,EAAlB,EAAsBD,eAAe,EAArC,CALd;AAME,IAAA,SAAS,EAAC,6BANZ;AAOE,IAAA,OAAO,EAAEkB,aAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,eAqBE,oBAAC,KAAD;AACE,IAAA,EAAE,EAAC,UADL;AAEE,IAAA,OAAO,EAAC,OAFV;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,KAAK,EAAC,UAJR;AAKE,IAAA,UAAU,EAAE,CAACjB,iBAAiB,EAAlB,EAAsBC,mBAAmB,CAAC,GAAD,CAAzC,CALd;AAME,IAAA,SAAS,EAAC,gCANZ;AAOE,IAAA,OAAO,EAAEgB,aAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,eA8BE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACD,SAAS,CAACK,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,WAAW,GAAG,OAAH,GAAa,QAD3B,CA9BF,CADF,eAmCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,IAAI,CAAC8B,UAAT,CAnCF,eAoCE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEH,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApCF,CADF;AAwCD,CA5HD;;AA8HA,eAAe5B,IAAf","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MAXLENGTH,\n} from \"../../shared/util/validators\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nimport \"./Auth.css\";\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, changeHandler, setFormData] = useForm(\n    {\n      name: {\n        value: \"\",\n        isValid: false,\n      },\n      email: {\n        value: \"a@b.c\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  // send data to the server!\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    // check if json is ok\n    \n\n    if (isLoginMode) {\n        try {\n          const responseData = await fetch(\n            'http://localhost:5000/api/users/login',\n            'POST',\n            JSON.stringify({\n              email: formState.inputs.email.value,\n              password: formState.inputs.password.value\n            }),\n            {\n              'Content-Type': 'application/json'\n            }\n          );\n          auth.login(responseData.user.id);\n        } catch (err) {}\n      } else {\n        try {\n          const responseData = await sendRequest(\n            'http://localhost:5000/api/users/signup',\n            'POST',\n            JSON.stringify({\n              name: formState.inputs.name.value,\n              email: formState.inputs.email.value,\n              password: formState.inputs.password.value\n            }),\n            {\n              'Content-Type': 'application/json'\n            }\n          );\n  \n          auth.login(responseData.user.id);\n        } catch (err) {}\n      }\n  };\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        { name: undefined },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  return (\n    <Card className=\"authentication\">\n      <form onSubmit={submitHandler}>\n        {!isLoginMode && (\n          <Input\n            element=\"input\"\n            id=\"name\"\n            type=\"text\"\n            label=\"Your name\"\n            validators={[VALIDATOR_REQUIRE]}\n            errorText=\"Please enter your name\"\n            onInput={changeHandler}\n          />\n        )}\n        <Input\n          id=\"email\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Email\"\n          validators={[VALIDATOR_REQUIRE(), VALIDATOR_EMAIL()]}\n          errorText=\"Please enter a valid email!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"password\"\n          element=\"input\"\n          type=\"password\"\n          label=\"Password\"\n          validators={[VALIDATOR_REQUIRE(), VALIDATOR_MAXLENGTH(100)]}\n          errorText=\"Please enter a valid password!\"\n          onInput={changeHandler}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\n        </Button>\n      </form>\n      <p>{auth.isLoggedIn}</p>\n      <Button onClick={switchModeHandler}>Switch</Button>\n    </Card>\n  );\n};\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}