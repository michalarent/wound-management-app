{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/UpdateSong.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/UIElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport './NewSong.css';\nimport { useForm } from '../../shared/hooks/form-hook';\nconst DUMMY_SONGS = [{\n  id: 's1',\n  title: 'Jebać PiS',\n  description: 'One of the most important songs of 2020 and 2021',\n  image: 'https://i.ytimg.com/vi/FQq6Mwv_jpw/maxresdefault.jpg',\n  length: '3500',\n  creator: 'u1'\n}, {\n  id: 's2',\n  title: 'Jebać SąD',\n  description: 'One of the most important songs of 2020 and 2021',\n  image: 'https://pbs.twimg.com/media/EbXlmjgWsAEy0Ph.png',\n  length: '3500',\n  creator: 'u2'\n}];\n\nconst UpdateSong = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const songId = useParams().songId;\n  const [formState, changeHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const identifiedSong = DUMMY_SONGS.find(p => p.id === songId);\n  useEffect(() => {\n    if (identifiedSong) {\n      setFormData({\n        title: {\n          value: identifiedSong.title,\n          isValid: true\n        },\n        description: {\n          value: identifiedSong.description,\n          isValid: true\n        }\n      }, true);\n    }\n\n    setIsLoading(false);\n  }, [setFormData, identifiedSong]);\n\n  const songSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  if (!identifiedSong) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, \"Could not find place!\"));\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, \"Loading...\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"song-form\",\n    onSubmit: songSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: changeHandler,\n    initialValue: formState.inputs.title.value,\n    initialValid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: changeHandler,\n    initialValue: formState.inputs.description.value,\n    initialValid: formState.inputs.description.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"UPDATE PLACE\"));\n};\n\nexport default UpdateSong;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/UpdateSong.js"],"names":["React","useEffect","useState","useParams","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_SONGS","id","title","description","image","length","creator","UpdateSong","isLoading","setIsLoading","songId","formState","changeHandler","setFormData","value","isValid","identifiedSong","find","p","songSubmitHandler","event","preventDefault","console","log","inputs"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams} from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/UIElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\n\nimport './NewSong.css';\nimport { useForm } from '../../shared/hooks/form-hook';\n\nconst DUMMY_SONGS = [\n    {\n        id: 's1',\n        title: 'Jebać PiS',\n        description: 'One of the most important songs of 2020 and 2021',\n        image: 'https://i.ytimg.com/vi/FQq6Mwv_jpw/maxresdefault.jpg',\n        length: '3500',\n        creator: 'u1'\n        \n    },\n    {\n        id: 's2',\n        title: 'Jebać SąD',\n        description: 'One of the most important songs of 2020 and 2021',\n        image: 'https://pbs.twimg.com/media/EbXlmjgWsAEy0Ph.png',\n        length: '3500',\n        creator: 'u2'\n        \n    },\n]\n\nconst UpdateSong = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const songId = useParams().songId;\n  \n    const [formState, changeHandler, setFormData] = useForm(\n      {\n        title: {\n          value: '',\n          isValid: false\n        },\n        description: {\n          value: '',\n          isValid: false\n        }\n      },\n      false\n    );\n  \n    const identifiedSong = DUMMY_SONGS.find(p => p.id === songId);\n  \n    useEffect(() => {\n        if (identifiedSong) {\n            setFormData(\n                {\n                title: {\n                    value: identifiedSong.title,\n                    isValid: true\n                },\n                description: {\n                    value: identifiedSong.description,\n                    isValid: true\n                }\n                },\n                true\n            );\n         }\n            setIsLoading(false);\n            }, [setFormData, identifiedSong]);\n        \n            const songSubmitHandler = event => {\n            event.preventDefault();\n            console.log(formState.inputs);\n            \n        };\n  \n    if (!identifiedSong) {\n      return (\n        <div className=\"center\">\n          <h2>Could not find place!</h2>\n        </div>\n      );\n    }\n  \n    if (isLoading) {\n      return (\n        <div className=\"center\">\n          <h2>Loading...</h2>\n        </div>\n      );\n    }\n  \n    return (\n      <form className=\"song-form\" onSubmit={songSubmitHandler}>\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={changeHandler}\n          initialValue={formState.inputs.title.value}\n          initialValid={formState.inputs.title.isValid}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description (min. 5 characters).\"\n          onInput={changeHandler}\n          initialValue={formState.inputs.description.value}\n          initialValid={formState.inputs.description.isValid}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          UPDATE PLACE\n        </Button>\n      </form>\n    );\n  };\n  \n  export default UpdateSong;\n\n"]},"metadata":{},"sourceType":"module"}