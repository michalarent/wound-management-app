{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewWound.js\";\nimport React, { useContext, useState } from \"react\"; // import Input from \"../../shared/components/FormElements/Input\";\n\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH, VALIDATOR_URL } from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport { useForm, Form } from \"../../shared/hooks/useForm\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { makeStyles, Paper } from \"@material-ui/core/styles\";\nimport { FormControl, InputLabel, FormHelperText, Input, Grid, TextField } from \"@material-ui/core\";\nconst initialFValues = {\n  name: \"\",\n  bodyPart: \"\",\n  description: \"\",\n  woundImageUpload: \"\"\n};\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(),\n      marginLeft: \"350px\"\n    },\n    \"& .MuiFormControl-root\": {\n      width: \"80%\",\n      margin: theme.spacing(1)\n    }\n  },\n  toolbar: theme.mixins.toolbar,\n  appBarSpacer: theme.mixins.toolbar\n}));\n\nconst NewWound = () => {\n  const classes = useStyles();\n  const auth = useContext(AuthContext);\n  const {\n    values,\n    setValues,\n    handleInputChange\n  } = useForm(initialFValues);\n  return /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    name: \"name\",\n    label: \"Name\",\n    value: values.name,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default NewWound;\n{\n  /* <form className=\"wound-form\" onSubmit={submitHandler}>\n        <p>\n          This wound was created on: {formState.dateCreated} and last edited on:{\" \"}\n          {formState.dateLastEdited}.\n        </p>\n        <Input\n          id=\"name\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Name\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"bodyPart\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Body Part\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid body part!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          x\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(3)]}\n          errorText=\"Please enter a valid description!\"\n          onInput={changeHandler}\n        />\n         <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD WOUND\n        </Button>\n        <p>Is the form valid? {String(formState.isValid)}</p>\n      </form> */\n  // send data to the server!\n  // const submitHandler = async (event) => {\n  //   event.preventDefault();\n  //   console.log(auth.userId);\n  //   const response = await fetch(\"http://localhost:5000/api/wounds\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({\n  //       name: formState.inputs.name.value,\n  //       bodyPart: formState.inputs.bodyPart.value,\n  //       description: formState.inputs.description.value,\n  //       dateLastEdited: Date.now(),\n  //       dateCreated: Date.now(),\n  //       owner: auth.userId,\n  //     }),\n  //   });\n  //   const responseData = await response.json();\n  //   if (!response.ok) {\n  //     throw new Error(responseData.message);\n  //   }\n  // };\n}","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewWound.js"],"names":["React","useContext","useState","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_URL","Button","useForm","Form","AuthContext","makeStyles","Paper","FormControl","InputLabel","FormHelperText","Input","Grid","TextField","initialFValues","name","bodyPart","description","woundImageUpload","useStyles","theme","root","margin","spacing","marginLeft","width","toolbar","mixins","appBarSpacer","NewWound","classes","auth","values","setValues","handleInputChange"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C,C,CACA;;AAEA,SACEC,iBADF,EAEEC,mBAFF,EAGEC,aAHF,QAIO,8BAJP;AAKA,OAAOC,MAAP,MAAmB,2CAAnB;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,4BAA9B;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,0BAAlC;AAIA,SACEC,WADF,EAEEC,UAFF,EAGEC,cAHF,EAIEC,KAJF,EAKEC,IALF,EAMEC,SANF,QAOO,mBAPP;AASA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,EADe;AAErBC,EAAAA,QAAQ,EAAE,EAFW;AAGrBC,EAAAA,WAAW,EAAE,EAHQ;AAIrBC,EAAAA,gBAAgB,EAAE;AAJG,CAAvB;AAOA,MAAMC,SAAS,GAAGb,UAAU,CAAEc,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJ,aAAS;AACPC,MAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,EADD;AAEPC,MAAAA,UAAU,EAAE;AAFL,KADL;AAKJ,8BAA0B;AACxBC,MAAAA,KAAK,EAAE,KADiB;AAExBH,MAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AAFgB;AALtB,GADiC;AAWvCG,EAAAA,OAAO,EAAEN,KAAK,CAACO,MAAN,CAAaD,OAXiB;AAYvCE,EAAAA,YAAY,EAAER,KAAK,CAACO,MAAN,CAAaD;AAZY,CAAZ,CAAD,CAA5B;;AAeA,MAAMG,QAAQ,GAAG,MAAM;AACrB,QAAMC,OAAO,GAAGX,SAAS,EAAzB;AACA,QAAMY,IAAI,GAAGlC,UAAU,CAACQ,WAAD,CAAvB;AAEA,QAAM;AAAE2B,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA;AAArB,MAA2C/B,OAAO,CAACW,cAAD,CAAxD;AAEA,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,SAAS,EAAEgB,OAAO,CAACvB,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,OAAO,EAAC,UADV;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,KAAK,EAAEyB,MAAM,CAACjB,IAJhB;AAKE,IAAA,QAAQ,EAAEmB,iBALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF;AAeD,CArBD;;AAuBA,eAAeL,QAAf;AAEA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD","sourcesContent":["import React, { useContext, useState } from \"react\";\n// import Input from \"../../shared/components/FormElements/Input\";\n\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_URL,\n} from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport { useForm, Form } from \"../../shared/hooks/useForm\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { makeStyles, Paper } from \"@material-ui/core/styles\";\n\n\n\nimport {\n  FormControl,\n  InputLabel,\n  FormHelperText,\n  Input,\n  Grid,\n  TextField,\n} from \"@material-ui/core\";\n\nconst initialFValues = {\n  name: \"\",\n  bodyPart: \"\",\n  description: \"\",\n  woundImageUpload: \"\",\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(),\n      marginLeft: \"350px\",\n    },\n    \"& .MuiFormControl-root\": {\n      width: \"80%\",\n      margin: theme.spacing(1),\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  appBarSpacer: theme.mixins.toolbar,\n}));\n\nconst NewWound = () => {\n  const classes = useStyles();\n  const auth = useContext(AuthContext);\n\n  const { values, setValues, handleInputChange } = useForm(initialFValues);\n\n  return (\n    <Form>\n      <Grid container className={classes.Paper}>\n        <Grid item xs={6}>\n          <TextField\n            variant=\"outlined\"\n            name=\"name\"\n            label=\"Name\"\n            value={values.name}\n            onChange={handleInputChange}\n          />\n        </Grid>\n      </Grid>\n    </Form>\n  );\n};\n\nexport default NewWound;\n\n{\n  /* <form className=\"wound-form\" onSubmit={submitHandler}>\n        <p>\n          This wound was created on: {formState.dateCreated} and last edited on:{\" \"}\n          {formState.dateLastEdited}.\n        </p>\n        <Input\n          id=\"name\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Name\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"bodyPart\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Body Part\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid body part!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          x\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(3)]}\n          errorText=\"Please enter a valid description!\"\n          onInput={changeHandler}\n        />\n\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD WOUND\n        </Button>\n        <p>Is the form valid? {String(formState.isValid)}</p>\n      </form> */\n  // send data to the server!\n  // const submitHandler = async (event) => {\n  //   event.preventDefault();\n  //   console.log(auth.userId);\n  //   const response = await fetch(\"http://localhost:5000/api/wounds\", {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify({\n  //       name: formState.inputs.name.value,\n  //       bodyPart: formState.inputs.bodyPart.value,\n  //       description: formState.inputs.description.value,\n  //       dateLastEdited: Date.now(),\n  //       dateCreated: Date.now(),\n  //       owner: auth.userId,\n  //     }),\n  //   });\n  //   const responseData = await response.json();\n  //   if (!response.ok) {\n  //     throw new Error(responseData.message);\n  //   }\n  // };\n}\n"]},"metadata":{},"sourceType":"module"}