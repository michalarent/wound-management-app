{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer, useEffect } from 'react'; //useEffect to run some logic whenever input value/validity changes\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isValid: props.initialValid || false\n  });\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValid\n  } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element = props.element === 'input' ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && 'form-control--invalid'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, props.label), element, !inputState.isValid && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 37\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","Input","props","inputState","dispatch","initialValue","initialValid","id","onInput","changeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect }  from 'react';\n\n//useEffect to run some logic whenever input value/validity changes\n\nimport { validate } from '../../util/validators';\n\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n    switch (action.type) {\n      case 'CHANGE':\n        return {\n          ...state,\n          value: action.val,\n          isValid: validate(action.val, action.validators)\n        };\n    \n      default:\n        return state;\n    }\n  };\n  const Input = props => {\n    const [inputState, dispatch] = useReducer(inputReducer, {\n      value: props.initialValue || '',\n      \n      isValid: props.initialValid || false\n    });\n    \n    const {id, onInput} = props;\n    const {value,isValid } = inputState;\n\n    useEffect(() => {\n        onInput(id, value, isValid)\n      }, [id, value, isValid, onInput]);\n    \n      const changeHandler = event => {\n        dispatch({\n          type: 'CHANGE',\n          val: event.target.value,\n          validators: props.validators\n        });\n      };\n    \n      const touchHandler = () => {\n        dispatch({\n          type: 'TOUCH'\n        });\n      };\n    \n      const element =\n        props.element === 'input' ? (\n          <input\n            id={props.id}\n            type={props.type}\n            placeholder={props.placeholder}\n            onChange={changeHandler}\n            onBlur={touchHandler}\n            value={inputState.value}\n          />\n        ) : (\n          <textarea\n            id={props.id}\n            rows={props.rows || 3}\n            onChange={changeHandler}\n            onBlur={touchHandler}\n            value={inputState.value}\n          />\n        );\n\n    \n    return (\n        <div className={`form-control ${!inputState.isValid && 'form-control--invalid'}`}>\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n            {!inputState.isValid && <p>{props.errorText}</p>}\n        </div>\n    );\n};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}