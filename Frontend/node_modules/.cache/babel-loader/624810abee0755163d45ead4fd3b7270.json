{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewWound.js\";\nimport React, { useContext } from \"react\"; // import Input from \"../../shared/components/FormElements/Input\";\n\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH, VALIDATOR_URL } from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { FormControl, InputLabel, FormHelperText, Input, Grid, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(),\n      marginLeft: '350px'\n    },\n    \"& .MuiFormControl-root\": {\n      width: \"80%\",\n      margin: theme.spacing(1)\n    }\n  },\n  toolbar: theme.mixins.toolbar,\n  appBarSpacer: theme.mixins.toolbar\n}));\n\nconst NewWound = () => {\n  const auth = useContext(AuthContext);\n  const classes = useStyles(); // initial values\n\n  const [formState, changeHandler] = useForm({\n    name: {\n      value: \"\",\n      isValid: false\n    },\n    bodyPart: {\n      value: \"\",\n      isValid: false\n    },\n    description: {\n      value: \"\",\n      isValid: false\n    },\n    woundImageUpload: {\n      value: \"\",\n      isValid: true\n    },\n    dateLastEdited: {\n      value: \"\",\n      isValid: true\n    },\n    dateCreated: {\n      value: \"\",\n      isValid: true\n    }\n  }, false); // send data to the server!\n\n  const submitHandler = async event => {\n    event.preventDefault();\n    console.log(auth.userId);\n    const response = await fetch(\"http://localhost:5000/api/wounds\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: formState.inputs.name.value,\n        bodyPart: formState.inputs.bodyPart.value,\n        description: formState.inputs.description.value,\n        dateLastEdited: Date.now(),\n        dateCreated: Date.now(),\n        owner: auth.userId\n      })\n    });\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      throw new Error(responseData.message);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    label: \"Name\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default NewWound;\n{\n  /* <form className=\"wound-form\" onSubmit={submitHandler}>\n        <p>\n          This wound was created on: {formState.dateCreated} and last edited on:{\" \"}\n          {formState.dateLastEdited}.\n        </p>\n        <Input\n          id=\"name\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Name\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"bodyPart\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Body Part\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid body part!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          x\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(3)]}\n          errorText=\"Please enter a valid description!\"\n          onInput={changeHandler}\n        />\n         <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD WOUND\n        </Button>\n        <p>Is the form valid? {String(formState.isValid)}</p>\n      </form> */\n}","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewWound.js"],"names":["React","useContext","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_URL","Button","useForm","AuthContext","FormControl","InputLabel","FormHelperText","Input","Grid","TextField","makeStyles","useStyles","theme","root","margin","spacing","marginLeft","width","toolbar","mixins","appBarSpacer","NewWound","auth","classes","formState","changeHandler","name","value","isValid","bodyPart","description","woundImageUpload","dateLastEdited","dateCreated","submitHandler","event","preventDefault","console","log","userId","response","fetch","method","headers","body","JSON","stringify","inputs","Date","now","owner","responseData","json","ok","Error","message"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\n// import Input from \"../../shared/components/FormElements/Input\";\n\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_URL,\n} from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport {\n  FormControl,\n  InputLabel,\n  FormHelperText,\n  Input,\n  Grid,\n  TextField\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(),\n      marginLeft: '350px'\n    },\n    \"& .MuiFormControl-root\": {\n      width: \"80%\",\n      margin: theme.spacing(1),\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  appBarSpacer: theme.mixins.toolbar,\n}));\n\nconst NewWound = () => {\n  const auth = useContext(AuthContext);\n  const classes = useStyles();\n\n  // initial values\n\n  const [formState, changeHandler] = useForm(\n    {\n      name: {\n        value: \"\",\n        isValid: false,\n      },\n      bodyPart: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n      woundImageUpload: {\n        value: \"\",\n        isValid: true,\n      },\n      dateLastEdited: {\n        value: \"\",\n        isValid: true,\n      },\n      dateCreated: {\n        value: \"\",\n        isValid: true,\n      },\n    },\n    false\n  );\n\n  // send data to the server!\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    console.log(auth.userId);\n\n    const response = await fetch(\"http://localhost:5000/api/wounds\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: formState.inputs.name.value,\n        bodyPart: formState.inputs.bodyPart.value,\n        description: formState.inputs.description.value,\n        dateLastEdited: Date.now(),\n        dateCreated: Date.now(),\n        owner: auth.userId,\n      }),\n    });\n\n    const responseData = await response.json();\n    if (!response.ok) {\n      throw new Error(responseData.message);\n    }\n  };\n\n  return (\n    <>\n      <div className={classes.toolbar}></div>\n      <form className={classes.root}>\n        <Grid container>\n          <Grid item xs={6}>\n            <TextField variant=\"outlined\" label=\"Name\" value={\"\"}></TextField>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n};\n\nexport default NewWound;\n\n{\n  /* <form className=\"wound-form\" onSubmit={submitHandler}>\n        <p>\n          This wound was created on: {formState.dateCreated} and last edited on:{\" \"}\n          {formState.dateLastEdited}.\n        </p>\n        <Input\n          id=\"name\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Name\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"bodyPart\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Body Part\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid body part!\"\n          onInput={changeHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          x\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(3)]}\n          errorText=\"Please enter a valid description!\"\n          onInput={changeHandler}\n        />\n\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD WOUND\n        </Button>\n        <p>Is the form valid? {String(formState.isValid)}</p>\n      </form> */\n}\n"]},"metadata":{},"sourceType":"module"}