{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/UpdateSong.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/UIElements/Button';\nimport { VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport './NewSong.css';\nimport { useForm } from '../../shared/hooks/form-hook';\nconst DUMMY_SONGS = [{\n  id: 's1',\n  title: 'Jebać PiS',\n  description: 'One of the most important songs of 2020 and 2021',\n  image: 'https://i.ytimg.com/vi/FQq6Mwv_jpw/maxresdefault.jpg',\n  length: '3500',\n  creator: 'u1'\n}, {\n  id: 's2',\n  title: 'Jebać SąD',\n  description: 'One of the most important songs of 2020 and 2021',\n  image: 'https://pbs.twimg.com/media/EbXlmjgWsAEy0Ph.png',\n  length: '3500',\n  creator: 'u2'\n}];\n\nconst UpdateSong = () => {\n  // extract value from route\n  const songId = useParams().songId;\n  const [isLoading, setIsLoading] = useState(true);\n  const [formState, changeHandler, setFormData] = useForm();\n  const identifiedSong = DUMMY_SONGS.find(s => s.id === songId);\n  useEffect(() => {\n    console.log(formState.inputs);\n    setFormData({\n      title: {\n        value: identifiedSong.title,\n        isValid: true\n      },\n      description: {\n        value: identifiedSong.description,\n        isValid: true\n      }\n    }, true);\n    setIsLoading(false);\n  }, [setFormData, identifiedSong]); // useEffect to only call when state changes!\n\n  const submitHandler = event => {\n    event.preventDefault(); // check if json is ok\n\n    console.log(formState.inputs);\n  };\n\n  if (!identifiedSong) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, \"Could not find song!\"));\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, \"Loading...\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"song-form\",\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    onInput: changeHandler,\n    errorText: \"Enter valid title.\",\n    value: formState.inputs.title.value,\n    valid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Enter valid description.\",\n    onInput: changeHandler,\n    value: formState.inputs.description.value,\n    valid: formState.inputs.description.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"UPDATE SONG\"));\n};\n\nexport default UpdateSong;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/UpdateSong.js"],"names":["React","useEffect","useState","useParams","Input","Button","VALIDATOR_REQUIRE","useForm","DUMMY_SONGS","id","title","description","image","length","creator","UpdateSong","songId","isLoading","setIsLoading","formState","changeHandler","setFormData","identifiedSong","find","s","console","log","inputs","value","isValid","submitHandler","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams} from 'react-router-dom'\n\nimport Input from '../../shared/components/FormElements/Input'\nimport Button from '../../shared/components/UIElements/Button'\nimport { VALIDATOR_REQUIRE } from '../../shared/util/validators';\n\n\n\nimport './NewSong.css';\nimport { useForm } from '../../shared/hooks/form-hook';\n\nconst DUMMY_SONGS = [\n    {\n        id: 's1',\n        title: 'Jebać PiS',\n        description: 'One of the most important songs of 2020 and 2021',\n        image: 'https://i.ytimg.com/vi/FQq6Mwv_jpw/maxresdefault.jpg',\n        length: '3500',\n        creator: 'u1'\n        \n    },\n    {\n        id: 's2',\n        title: 'Jebać SąD',\n        description: 'One of the most important songs of 2020 and 2021',\n        image: 'https://pbs.twimg.com/media/EbXlmjgWsAEy0Ph.png',\n        length: '3500',\n        creator: 'u2'\n        \n    },\n]\n\nconst UpdateSong = () => {\n    // extract value from route\n    const songId = useParams().songId;\n    const [isLoading, setIsLoading] = useState(true);\n\n    const [formState, changeHandler, setFormData] =useForm(\n        \n        // {\n        //     title: {\n        //         value: '',\n        //         isValid: false\n        //     },\n        //     description: {\n        //         value: '',\n        //         isValid: false\n        //     }\n        // },\n        // false\n    );\n\n    const identifiedSong = DUMMY_SONGS.find(s => s.id === songId);\n\n    useEffect(() => {\n        console.log(formState.inputs)\n        setFormData(\n          {\n            title: {\n              value: identifiedSong.title,\n              isValid: true\n            },\n            description: {\n              value: identifiedSong.description,\n              isValid: true\n            }\n          },\n          true\n        );\n        setIsLoading(false);\n      }, [setFormData, identifiedSong]);\n\n    // useEffect to only call when state changes!\n    \n\n    const submitHandler = event => {\n        event.preventDefault();\n        // check if json is ok\n        console.log(formState.inputs);\n    };\n    \n\n    \n\n    if (!identifiedSong) {\n        return (<div className=\"center\">\n            <h2>Could not find song!</h2>\n        </div>);\n    }\n\n    if (isLoading) {\n        return (\n          <div className=\"center\">\n            <h2>Loading...</h2>\n          </div>\n        );\n      }\n\n    return (\n        <form className=\"song-form\" onSubmit={submitHandler}>\n            <Input \n            id=\"title\" \n            element=\"input\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            onInput={changeHandler}\n            errorText=\"Enter valid title.\"\n            value={formState.inputs.title.value}    \n            valid={formState.inputs.title.isValid}\n            />\n            <Input \n            id=\"description\" \n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Enter valid description.\"\n            onInput={changeHandler}\n            value={formState.inputs.description.value}\n            valid={formState.inputs.description.isValid} />\n            <Button type=\"submit\" disabled={!formState.isValid}>UPDATE SONG</Button>\n        </form>\n    )\n};\n\nexport default UpdateSong;"]},"metadata":{},"sourceType":"module"}