{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/components/WoundTable.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport WoundItem from \"./WoundItem\";\nimport \"./WoundTable.css\";\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  table: {\n    maxWidth: '80%',\n    marginLeft: '300px',\n    position: 'relative'\n  }\n}));\n\nconst WoundTable = () => {\n  const classes = useStyles(); // getModalStyle is not a pure function, we roll the style only on the first render\n\n  const [modalStyle] = React.useState(getModalStyle);\n  const auth = useContext(AuthContext);\n  const userId = useParams().userId;\n  const [loadedWounds, setLoadedWounds] = useState([]);\n  const [modalInfo, setModalInfo] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleOpen = () => setShow(true);\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      const response = await fetch(`http://localhost:5000/api/wounds/user/${userId}`);\n      const responseData = await response.json();\n\n      if (!response.ok) {} else {\n        setLoadedWounds(responseData.wound);\n        console.log(`Row below`);\n      }\n    };\n\n    sendRequest();\n  }, []);\n  const columns = [{\n    dataField: \"name\",\n    text: \"Wound Name\",\n    align: \"left\"\n  }, {\n    dataField: \"bodyPart\",\n    text: \"Body Part\",\n    align: \"left\"\n  }, {\n    dataField: \"description\",\n    text: \"Description\",\n    align: \"left\"\n  }, {\n    dataField: \"dateCreated\",\n    text: \"Date Created\",\n    align: \"left\"\n  }, {\n    dataField: \"dateLastEdited\",\n    text: \"Date Last Edited\",\n    align: \"left\"\n  }];\n  const rowEvents = {\n    onClick: (e, row) => {\n      setModalInfo(row);\n      console.log(row);\n      toggleTrueFalse();\n    }\n  };\n\n  const onRowClick = row => {\n    setModalInfo(row.target);\n    console.log(row);\n    toggleTrueFalse();\n  };\n\n  const toggleTrueFalse = () => {\n    setShowModal(handleOpen);\n  };\n\n  const ModalContent = () => {\n    return /*#__PURE__*/React.createElement(Modal, {\n      open: show,\n      onClose: handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(WoundItem, {\n      key: modalInfo.id,\n      id: modalInfo.id,\n      name: modalInfo.name,\n      bodyPart: modalInfo.bodyPart,\n      description: modalInfo.description,\n      dateCreated: modalInfo.dateCreated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BootstrapTable, {\n    keyField: \"id\",\n    data: loadedWounds,\n    columns: columns,\n    rowEvents: rowEvents,\n    striped: true,\n    condensed: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: \"table\",\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"Dessert (100g serving)\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, \"Calories\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, \"Fat\\xA0(g)\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, \"Carbs\\xA0(g)\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, \"Protein\\xA0(g)\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, loadedWounds.map((loadedWound, i) => /*#__PURE__*/React.createElement(TableRow, {\n    key: loadedWound.name,\n    onClick: onRowClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  }, loadedWound.name), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, loadedWound.calories), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }, loadedWound.fat), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 15\n    }\n  }, loadedWound.carbs), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 15\n    }\n  }, loadedWound.protein)))))), show ? /*#__PURE__*/React.createElement(ModalContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }) : null);\n};\n\nexport default WoundTable;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/components/WoundTable.js"],"names":["React","useState","useEffect","useParams","useContext","AuthContext","BootstrapTable","paginationFactory","Modal","Button","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","WoundItem","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","table","maxWidth","marginLeft","WoundTable","classes","modalStyle","auth","userId","loadedWounds","setLoadedWounds","modalInfo","setModalInfo","showModal","setShowModal","show","setShow","handleClose","handleOpen","sendRequest","response","fetch","responseData","json","ok","wound","console","log","columns","dataField","text","align","rowEvents","onClick","e","row","toggleTrueFalse","onRowClick","target","ModalContent","id","name","bodyPart","description","dateCreated","map","loadedWound","i","calories","fat","carbs","protein"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport WoundItem from \"./WoundItem\";\nimport \"./WoundTable.css\";\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  table: {\n    maxWidth: '80%',\n    marginLeft: '300px',\n    position: 'relative'\n  }\n}));\n\nconst WoundTable = () => {\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = React.useState(getModalStyle);\n\n  const auth = useContext(AuthContext);\n  const userId = useParams().userId;\n\n  const [loadedWounds, setLoadedWounds] = useState([]);\n  const [modalInfo, setModalInfo] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleOpen = () => setShow(true);\n\n  useEffect(() => {\n    const sendRequest = async () => {\n      const response = await fetch(\n        `http://localhost:5000/api/wounds/user/${userId}`\n      );\n      const responseData = await response.json();\n      if (!response.ok) {\n      } else {\n        setLoadedWounds(responseData.wound);\n        console.log(`Row below`);\n      }\n    };\n    sendRequest();\n  }, []);\n\n  const columns = [\n    {\n      dataField: \"name\",\n      text: \"Wound Name\",\n      align: \"left\",\n    },\n    {\n      dataField: \"bodyPart\",\n      text: \"Body Part\",\n      align: \"left\",\n    },\n    {\n      dataField: \"description\",\n      text: \"Description\",\n      align: \"left\",\n    },\n    {\n      dataField: \"dateCreated\",\n      text: \"Date Created\",\n      align: \"left\",\n    },\n    {\n      dataField: \"dateLastEdited\",\n      text: \"Date Last Edited\",\n      align: \"left\",\n    },\n  ];\n\n  const rowEvents = {\n    onClick: (e, row) => {\n      setModalInfo(row);\n      console.log(row);\n      toggleTrueFalse();\n    },\n  };\n\n  const onRowClick = (row) => {\n      setModalInfo(row.target);\n      console.log(row);\n      toggleTrueFalse();\n  };\n\n  const toggleTrueFalse = () => {\n    setShowModal(handleOpen);\n  };\n\n  const ModalContent = () => {\n    return (\n      <Modal open={show} onClose={handleClose}>\n        <WoundItem\n          key={modalInfo.id}\n          id={modalInfo.id}\n          name={modalInfo.name}\n          bodyPart={modalInfo.bodyPart}\n          description={modalInfo.description}\n          dateCreated={modalInfo.dateCreated}\n        />\n      </Modal>\n    );\n  };\n\n  return (\n    <div>\n      <BootstrapTable\n        keyField=\"id\"\n        data={loadedWounds}\n        columns={columns}\n        rowEvents={rowEvents}\n        striped\n        condensed\n      />\n      \n      <TableContainer component={Paper}>\n      <Table className='table' aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving)</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {loadedWounds.map((loadedWound, i) => (\n            <TableRow key={loadedWound.name} onClick={onRowClick}>\n              <TableCell component=\"th\" scope=\"row\">\n                {loadedWound.name}\n              </TableCell>\n              <TableCell align=\"right\">{loadedWound.calories}</TableCell>\n              <TableCell align=\"right\">{loadedWound.fat}</TableCell>\n              <TableCell align=\"right\">{loadedWound.carbs}</TableCell>\n              <TableCell align=\"right\">{loadedWound.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    {show ? <ModalContent /> : null}\n    </div>\n  );\n};\n\nexport default WoundTable;\n"]},"metadata":{},"sourceType":"module"}