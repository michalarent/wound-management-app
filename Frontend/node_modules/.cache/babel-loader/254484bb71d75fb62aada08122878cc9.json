{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/UpdateSong.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/UIElements/Button';\nimport { VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport './NewSong.css';\nimport { useForm } from '../../shared/hooks/form-hook';\nconst DUMMY_SONGS = [{\n  id: 's1',\n  title: 'Jebać PiS',\n  description: 'One of the most important songs of 2020 and 2021',\n  image: 'https://i.ytimg.com/vi/FQq6Mwv_jpw/maxresdefault.jpg',\n  length: '3500',\n  creator: 'u1'\n}, {\n  id: 's2',\n  title: 'Jebać SąD',\n  description: 'One of the most important songs of 2020 and 2021',\n  image: 'https://pbs.twimg.com/media/EbXlmjgWsAEy0Ph.png',\n  length: '3500',\n  creator: 'u2'\n}];\n\nconst UpdatePlace = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const placeId = useParams().placeId;\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId);\n  useEffect(() => {\n    setFormData({\n      title: {\n        value: identifiedPlace.title,\n        isValid: true\n      },\n      description: {\n        value: identifiedPlace.description,\n        isValid: true\n      }\n    }, true);\n    setIsLoading(false);\n  }, [setFormData, identifiedPlace]);\n\n  const placeUpdateSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  if (!identifiedPlace) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, \"Could not find place!\"));\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, \"Loading...\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: formState.inputs.title.value,\n    initialValid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: formState.inputs.description.value,\n    initialValid: formState.inputs.description.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, \"UPDATE PLACE\"));\n};\n\nexport default UpdatePlace; // const UpdateSong = () => {\n//     // extract value from route\n//     const [isLoading, setIsLoading] = useState(true);\n//     const songId = useParams().songId;\n//     const [formState, changeHandler, setFormData] =useForm(\n//         {\n//             title: {\n//                 value: 'lol',\n//                 isValid: true\n//             },\n//             description: {\n//                 value: 'lol',\n//                 isValid: true\n//             }\n//         },\n//         false\n//     );\n//     const identifiedSong = DUMMY_SONGS.find(s => s.id === songId);\n//     useEffect(() => {\n//         console.log(formState.inputs)\n//         setFormData(\n//           {\n//             title: {\n//               value: identifiedSong.title,\n//               isValid: true\n//             },\n//             description: {\n//               value: identifiedSong.description,\n//               isValid: true\n//             }\n//           },\n//           true\n//         );\n//         setIsLoading(false);\n//       }, [setFormData, identifiedSong]);\n//     // useEffect to only call when state changes!\n//     const submitHandler = event => {\n//         event.preventDefault();\n//         // check if json is ok\n//         console.log(formState.inputs);\n//     };\n//     if (!identifiedSong) {\n//         return (<div className=\"center\">\n//             <h2>Could not find song!</h2>\n//         </div>);\n//     }\n//     if (isLoading) {\n//         return (\n//           <div className=\"center\">\n//             <h2>Loading...</h2>\n//           </div>\n//         );\n//       }\n//     return (\n//         <form className=\"song-form\" onSubmit={submitHandler}>\n//             <Input \n//             id=\"title\" \n//             element=\"input\"\n//             label=\"Title\"\n//             validators={[VALIDATOR_REQUIRE()]}\n//             onInput={changeHandler}\n//             errorText=\"Enter valid title.\"\n//             value={formState.inputs.title.value}    \n//             valid={formState.inputs.title.isValid}\n//             />\n//             <Input \n//             id=\"description\" \n//             element=\"textarea\"\n//             label=\"Description\"\n//             validators={[VALIDATOR_REQUIRE()]}\n//             errorText=\"Enter valid description.\"\n//             onInput={changeHandler}\n//             value={formState.inputs.description.value}\n//             valid={formState.inputs.description.isValid} />\n//             <Button type=\"submit\" disabled={!formState.isValid}>UPDATE SONG</Button>\n//         </form>\n//     )\n// };\n// export default UpdateSong;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/UpdateSong.js"],"names":["React","useEffect","useState","useParams","Input","Button","VALIDATOR_REQUIRE","useForm","DUMMY_SONGS","id","title","description","image","length","creator","UpdatePlace","isLoading","setIsLoading","placeId","formState","inputHandler","setFormData","value","isValid","identifiedPlace","DUMMY_PLACES","find","p","placeUpdateSubmitHandler","event","preventDefault","console","log","inputs","VALIDATOR_MINLENGTH"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams} from 'react-router-dom'\n\nimport Input from '../../shared/components/FormElements/Input'\nimport Button from '../../shared/components/UIElements/Button'\nimport { VALIDATOR_REQUIRE } from '../../shared/util/validators';\n\n\n\nimport './NewSong.css';\nimport { useForm } from '../../shared/hooks/form-hook';\n\nconst DUMMY_SONGS = [\n    {\n        id: 's1',\n        title: 'Jebać PiS',\n        description: 'One of the most important songs of 2020 and 2021',\n        image: 'https://i.ytimg.com/vi/FQq6Mwv_jpw/maxresdefault.jpg',\n        length: '3500',\n        creator: 'u1'\n        \n    },\n    {\n        id: 's2',\n        title: 'Jebać SąD',\n        description: 'One of the most important songs of 2020 and 2021',\n        image: 'https://pbs.twimg.com/media/EbXlmjgWsAEy0Ph.png',\n        length: '3500',\n        creator: 'u2'\n        \n    },\n]\n\nconst UpdatePlace = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const placeId = useParams().placeId;\n  \n    const [formState, inputHandler, setFormData] = useForm(\n      {\n        title: {\n          value: '',\n          isValid: false\n        },\n        description: {\n          value: '',\n          isValid: false\n        }\n      },\n      false\n    );\n  \n    const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId);\n  \n    useEffect(() => {\n      setFormData(\n        {\n          title: {\n            value: identifiedPlace.title,\n            isValid: true\n          },\n          description: {\n            value: identifiedPlace.description,\n            isValid: true\n          }\n        },\n        true\n      );\n      setIsLoading(false);\n    }, [setFormData, identifiedPlace]);\n  \n    const placeUpdateSubmitHandler = event => {\n      event.preventDefault();\n      console.log(formState.inputs);\n    };\n  \n    if (!identifiedPlace) {\n      return (\n        <div className=\"center\">\n          <h2>Could not find place!</h2>\n        </div>\n      );\n    }\n  \n    if (isLoading) {\n      return (\n        <div className=\"center\">\n          <h2>Loading...</h2>\n        </div>\n      );\n    }\n  \n    return (\n      <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n          initialValue={formState.inputs.title.value}\n          initialValid={formState.inputs.title.isValid}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description (min. 5 characters).\"\n          onInput={inputHandler}\n          initialValue={formState.inputs.description.value}\n          initialValid={formState.inputs.description.isValid}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          UPDATE PLACE\n        </Button>\n      </form>\n    );\n  };\n  \n  export default UpdatePlace;\n\n// const UpdateSong = () => {\n//     // extract value from route\n//     const [isLoading, setIsLoading] = useState(true);\n//     const songId = useParams().songId;\n    \n\n//     const [formState, changeHandler, setFormData] =useForm(\n        \n//         {\n//             title: {\n//                 value: 'lol',\n//                 isValid: true\n//             },\n//             description: {\n//                 value: 'lol',\n//                 isValid: true\n//             }\n//         },\n//         false\n//     );\n\n//     const identifiedSong = DUMMY_SONGS.find(s => s.id === songId);\n    \n    \n//     useEffect(() => {\n//         console.log(formState.inputs)\n//         setFormData(\n//           {\n//             title: {\n//               value: identifiedSong.title,\n//               isValid: true\n//             },\n//             description: {\n//               value: identifiedSong.description,\n//               isValid: true\n//             }\n//           },\n//           true\n//         );\n//         setIsLoading(false);\n//       }, [setFormData, identifiedSong]);\n\n//     // useEffect to only call when state changes!\n    \n\n//     const submitHandler = event => {\n//         event.preventDefault();\n//         // check if json is ok\n//         console.log(formState.inputs);\n//     };\n    \n\n    \n\n//     if (!identifiedSong) {\n//         return (<div className=\"center\">\n//             <h2>Could not find song!</h2>\n//         </div>);\n//     }\n\n//     if (isLoading) {\n//         return (\n//           <div className=\"center\">\n//             <h2>Loading...</h2>\n//           </div>\n//         );\n//       }\n\n//     return (\n//         <form className=\"song-form\" onSubmit={submitHandler}>\n//             <Input \n//             id=\"title\" \n//             element=\"input\"\n//             label=\"Title\"\n//             validators={[VALIDATOR_REQUIRE()]}\n//             onInput={changeHandler}\n//             errorText=\"Enter valid title.\"\n//             value={formState.inputs.title.value}    \n//             valid={formState.inputs.title.isValid}\n//             />\n//             <Input \n//             id=\"description\" \n//             element=\"textarea\"\n//             label=\"Description\"\n//             validators={[VALIDATOR_REQUIRE()]}\n//             errorText=\"Enter valid description.\"\n//             onInput={changeHandler}\n//             value={formState.inputs.description.value}\n//             valid={formState.inputs.description.isValid} />\n//             <Button type=\"submit\" disabled={!formState.isValid}>UPDATE SONG</Button>\n//         </form>\n//     )\n// };\n\n// export default UpdateSong;"]},"metadata":{},"sourceType":"module"}