{"ast":null,"code":"import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialValidity\n  });\n  const changeHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n  return [formState, changeHandler, setFormData];\n};","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/shared/hooks/form-hook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialValidity","formState","dispatch","changeHandler","id","setFormData","inputData","formValidity"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAChC,YAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC5BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACH,SAFD,MAEO;AACHH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACH;AACJ;;AACD,aAAO,EACH,GAAGN,KADA;AAEHK,QAAAA,MAAM,EAAE,EACJ,GAAGL,KAAK,CAACK,MADL;AAEJ,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAClBG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KADI;AAElBD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAFE;AAFd,SAFL;AAQHA,QAAAA,OAAO,EAAEH;AARN,OAAP;;AAWJ,SAAK,UAAL;AACI,aAAO;AACHE,QAAAA,MAAM,EAAEJ,MAAM,CAACI,MADZ;AAEHC,QAAAA,OAAO,EAAEL,MAAM,CAACE;AAFb,OAAP;;AAMJ;AACI,aAAOH,KAAP;AA7BR;AA+BH,CAhCD;;AAkCA,OAAO,MAAMQ,OAAO,GAAG,CAACC,aAAD,EAAgBC,eAAhB,KAAoC;AACvD,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAyBd,UAAU,CAACC,WAAD,EAAc;AACnDM,IAAAA,MAAM,EAAEI,aAD2C;AAEnDH,IAAAA,OAAO,EAAEI;AAF0C,GAAd,CAAzC;AAKA,QAAMG,aAAa,GAAGhB,WAAW,CAAC,CAACiB,EAAD,EAAKP,KAAL,EAAYD,OAAZ,KAAwB;AACtDM,IAAAA,QAAQ,CAAC;AACLV,MAAAA,IAAI,EAAE,cADD;AAELK,MAAAA,KAAK,EAAEA,KAFF;AAGLD,MAAAA,OAAO,EAAEA,OAHJ;AAILF,MAAAA,OAAO,EAAEU;AAJJ,KAAD,CAAR;AAMH,GAPgC,EAO9B,EAP8B,CAAjC;AASA,QAAMC,WAAW,GAAGlB,WAAW,CAAC,CAACmB,SAAD,EAAYC,YAAZ,KAA6B;AACzDL,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAE,UADC;AAEPG,MAAAA,MAAM,EAAEW,SAFD;AAGPb,MAAAA,WAAW,EAAEc;AAHN,KAAD,CAAR;AAKD,GAN4B,EAM1B,EAN0B,CAA/B;AAQA,SAAO,CAACN,SAAD,EAAYE,aAAZ,EAA2BE,WAA3B,CAAP;AACH,CAxBM","sourcesContent":["import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: { \n                    value: action.value, \n                    isValid: action.isValid }\n                },\n                isValid: formIsValid\n            };\n\n        case 'SET_DATA':\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            };\n\n        \n        default:\n            return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialValidity) => {\n    const [formState, dispatch] =  useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialValidity\n    });\n\n    const changeHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE',\n            value: value, \n            isValid: isValid, \n            inputId: id\n        });\n    }, []);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n          type: 'SET_DATA',\n          inputs: inputData,\n          formIsValid: formValidity\n        });\n      }, []);\n\n    return [formState, changeHandler, setFormData];\n};"]},"metadata":{},"sourceType":"module"}