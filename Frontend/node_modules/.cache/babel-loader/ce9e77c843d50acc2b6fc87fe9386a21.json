{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewWound.js\";\nimport React, { useContext } from \"react\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH, VALIDATOR_URL } from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./NewSong.css\";\n\nconst NewWound = () => {\n  const auth = useContext(AuthContext);\n  const [formState, changeHandler] = useForm({\n    name: {\n      value: \"\",\n      isValid: false\n    },\n    bodyPart: {\n      value: \"\",\n      isValid: false\n    },\n    description: {\n      value: \"\",\n      isValid: false\n    },\n    dateLastEdited: {\n      value: \"\",\n      isValid: true\n    },\n    dateCreated: {\n      value: \"\",\n      isValid: true\n    }\n  }, false); // send data to the server!\n\n  const submitHandler = async event => {\n    event.preventDefault();\n    console.log(auth.id);\n    const response = await fetch(\"http://localhost:5000/api/wounds\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: formState.inputs.title.value,\n        bodyPart: formState.inputs.bodyPart.value,\n        description: formState.inputs.description.value,\n        dateLastEdited: Date.now(),\n        dateCreated: Date.now(),\n        owner: auth.id\n      })\n    });\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      throw new Error(responseData.message);\n    }\n\n    console.log(responseData); // check if json is ok\n\n    console.log(formState.inputs);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"song-form\",\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"This wound was created on: \", formState.dateCreated, \" and last edited on: \", formState.dateLastEdited, \".\"), /*#__PURE__*/React.createElement(Input, {\n    id: \"name\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Name\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"body-part\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Body Part\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid body part!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(3)],\n    errorText: \"Please enter a valid description!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, \"ADD WOUND\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, \"Is the form valid? \", String(formState.isValid)));\n};\n\nexport default NewWound;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/NewWound.js"],"names":["React","useContext","Input","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_URL","Button","useForm","AuthContext","NewWound","auth","formState","changeHandler","name","value","isValid","bodyPart","description","dateLastEdited","dateCreated","submitHandler","event","preventDefault","console","log","id","response","fetch","method","headers","body","JSON","stringify","inputs","title","Date","now","owner","responseData","json","ok","Error","message","String"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport Input from \"../../shared/components/FormElements/Input\";\n\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_URL,\n} from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/UIElements/Button\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport \"./NewSong.css\";\n\nconst NewWound = () => {\n  const auth = useContext(AuthContext);\n\n  const [formState, changeHandler] = useForm(\n    {\n      name: {\n        value: \"\",\n        isValid: false,\n      },\n      bodyPart: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n      dateLastEdited: {\n        value: \"\",\n        isValid: true,\n      },\n      dateCreated: {\n        value: \"\",\n        isValid: true,\n      },\n    },\n    false\n  );\n\n  // send data to the server!\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    console.log(auth.id);\n\n    const response = await fetch(\"http://localhost:5000/api/wounds\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: formState.inputs.title.value,\n        bodyPart: formState.inputs.bodyPart.value,\n        description: formState.inputs.description.value,\n        dateLastEdited: Date.now(),\n        dateCreated: Date.now(),\n        owner: auth.id,\n      }),\n    });\n\n    const responseData = await response.json();\n    if (!response.ok) {\n      throw new Error(responseData.message);\n    }\n    console.log(responseData);\n\n    // check if json is ok\n    console.log(formState.inputs);\n  };\n\n  return (\n    <form className=\"song-form\" onSubmit={submitHandler}>\n      <p>This wound was created on: {formState.dateCreated} and last edited on: {formState.dateLastEdited}.</p>\n      <Input\n        id=\"name\"\n        element=\"input\"\n        type=\"text\"\n        label=\"Name\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Please enter a valid title!\"\n        onInput={changeHandler}\n      />\n      <Input\n        id=\"body-part\"\n        element=\"input\"\n        type=\"text\"\n        label=\"Body Part\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Please enter a valid body part!\"\n        onInput={changeHandler}\n      />\n      <Input\n        id=\"description\"\n        element=\"textarea\"\n        label=\"Description\"\n        validators={[VALIDATOR_MINLENGTH(3)]}\n        errorText=\"Please enter a valid description!\"\n        onInput={changeHandler}\n      />\n\n      <Button type=\"submit\" disabled={!formState.isValid}>\n        ADD WOUND\n      </Button>\n      <p>Is the form valid? {String(formState.isValid)}</p>\n    </form>\n  );\n};\n\nexport default NewWound;\n"]},"metadata":{},"sourceType":"module"}