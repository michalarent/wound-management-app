{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/UpdateSong.js\";\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/UIElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport './NewSong.css';\nimport { useForm } from '../../shared/hooks/form-hook';\nconst DUMMY_SONGS = [{\n  id: 's1',\n  title: 'Jebać PiS',\n  description: 'One of the most important songs of 2020 and 2021',\n  image: 'https://i.ytimg.com/vi/FQq6Mwv_jpw/maxresdefault.jpg',\n  length: '3500',\n  creator: 'u1'\n}, {\n  id: 's2',\n  title: 'Jebać SąD',\n  description: 'One of the most important songs of 2020 and 2021',\n  image: 'https://pbs.twimg.com/media/EbXlmjgWsAEy0Ph.png',\n  length: '3500',\n  creator: 'u2'\n}];\n\nconst UpdateSong = () => {\n  // extract value from route\n  const songId = useParams().songId;\n  const identifiedSong = DUMMY_SONGS.find(s => s.id === songId);\n  const [formState, changeHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false); // useEffect to only call when state changes!\n\n  useEffect(() => {\n    setFormData({\n      title: {\n        value: identifiedSong.title,\n        isValid: true\n      },\n      description: {\n        value: identifiedSong.description,\n        isValid: true\n      }\n    }, true);\n  }, [setFormData, identifiedSong]);\n\n  const submitHandler = event => {\n    event.preventDefault(); // check if json is ok\n\n    console.log(formState.inputs);\n  };\n\n  if (!identifiedSong) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, \"Could not find place!\"));\n  }\n\n  if (!formState.inputs.title.value) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, \"Loading...\"));\n  }\n\n  return formState.inputs.title.value && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"song-form\",\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    onInput: changeHandler,\n    errorText: \"Enter valid title.\",\n    value: formState.inputs.title.value,\n    valid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"description\",\n    type: \"text\",\n    label: \"Description\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Enter valid description.\",\n    onInput: changeHandler,\n    value: formState.inputs.description.value,\n    valid: formState.inputs.description.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, \"UPDATE PLACE\"));\n};\n\nexport default UpdateSong;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/songs/pages/UpdateSong.js"],"names":["React","useEffect","useParams","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_SONGS","id","title","description","image","length","creator","UpdateSong","songId","identifiedSong","find","s","formState","changeHandler","setFormData","value","isValid","submitHandler","event","preventDefault","console","log","inputs"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams} from 'react-router-dom'\n\nimport Input from '../../shared/components/FormElements/Input'\nimport Button from '../../shared/components/UIElements/Button'\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH} from '../../shared/util/validators';\n\n\n\nimport './NewSong.css';\nimport { useForm } from '../../shared/hooks/form-hook';\n\nconst DUMMY_SONGS = [\n    {\n        id: 's1',\n        title: 'Jebać PiS',\n        description: 'One of the most important songs of 2020 and 2021',\n        image: 'https://i.ytimg.com/vi/FQq6Mwv_jpw/maxresdefault.jpg',\n        length: '3500',\n        creator: 'u1'\n        \n    },\n    {\n        id: 's2',\n        title: 'Jebać SąD',\n        description: 'One of the most important songs of 2020 and 2021',\n        image: 'https://pbs.twimg.com/media/EbXlmjgWsAEy0Ph.png',\n        length: '3500',\n        creator: 'u2'\n        \n    },\n]\n\nconst UpdateSong = () => {\n    // extract value from route\n    const songId = useParams().songId;\n\n    const identifiedSong = DUMMY_SONGS.find(s => s.id === songId);\n\n\n    const [formState, changeHandler, setFormData] =useForm(\n        {\n        title: {\n            value: '',\n            isValid: false\n        },\n        description: {\n            value: '',\n            isValid: false\n        }\n        },\n        false\n    );\n\n    // useEffect to only call when state changes!\n    useEffect(() => {\n        setFormData(\n            {\n                title: {\n                    value: identifiedSong.title,\n                    isValid: true\n                },\n                description: {\n                    value: identifiedSong.description,\n                    isValid: true\n                }\n            },\n            true\n        )\n    }, [setFormData, identifiedSong]);\n\n    \n\n    \n\n    const submitHandler = event => {\n        event.preventDefault();\n        // check if json is ok\n        console.log(formState.inputs);\n    };\n    \n\n    \n\n    if (!identifiedSong) {\n        return (<div className=\"center\">\n            <h2>Could not find place!</h2>\n        </div>);\n    }\n\n    if (!formState.inputs.title.value) {\n        return (\n            <div className=\"center\">\n                <h2>Loading...</h2>\n            </div>\n        )\n    }\n    return formState.inputs.title.value && \n        <form className=\"song-form\" onSubmit={submitHandler}>\n            <Input \n            id=\"title\" \n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            onInput={changeHandler}\n            errorText=\"Enter valid title.\"\n            value={formState.inputs.title.value} \n            valid={formState.inputs.title.isValid}\n            />\n            <Input \n            id=\"title\" \n            element=\"description\"\n            type=\"text\"\n            label=\"Description\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Enter valid description.\"\n            onInput={changeHandler}\n            value={formState.inputs.description.value}\n            valid={formState.inputs.description.isValid} />\n            <Button type=\"submit\" disabled={!formState.isValid}>UPDATE PLACE</Button>\n        </form>\n\n};\n\nexport default UpdateSong;"]},"metadata":{},"sourceType":"module"}