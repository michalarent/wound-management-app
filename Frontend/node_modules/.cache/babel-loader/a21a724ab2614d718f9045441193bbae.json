{"ast":null,"code":"var _jsxFileName = \"/Users/michalarent/Documents/TIN-project/Frontend/src/users/pages/Auth.js\";\nimport React, { useState } from 'react';\nimport { VALIDATOR_EMAIL, VALIDATOR_REQUIRE, VALIDATOR_MAXLENGTH } from '../../shared/util/validators';\nimport Input from '../../shared/components/FormElements/Input';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport Button from '../../shared/components/UIElements/Button';\nimport Card from '../../shared/components/UIElements/Button';\n\nconst Auth = () => {\n  const [isLoginMode, setIsLoginMode] = useState();\n  const [formState, changeHandler, setFormData] = useForm({\n    name: {\n      value: '',\n      isValid: false\n    },\n    email: {\n      value: 'a@b.c',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false); // send data to the server!\n\n  const submitHandler = event => {\n    event.preventDefault(); // check if json is ok\n\n    console.log(formState.inputs);\n  };\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({\n        name: 'undefined'\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({ ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"song-form\",\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, !isLoginMode && /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Your name\",\n    validators: [VALIDATOR_REQUIRE],\n    errorText: \"Please enter your name\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"email\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Email\",\n    validators: [VALIDATOR_REQUIRE(), VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid email!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"password\",\n    element: \"input\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_REQUIRE(), VALIDATOR_MAXLENGTH(100)],\n    errorText: \"Please enter a valid password!\",\n    onInput: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, isLoginMode ? 'LOGIN' : 'SIGNUP')), /*#__PURE__*/React.createElement(Button, {\n    onClick: switchModeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Switch\"));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/Users/michalarent/Documents/TIN-project/Frontend/src/users/pages/Auth.js"],"names":["React","useState","VALIDATOR_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MAXLENGTH","Input","useForm","Button","Card","Auth","isLoginMode","setIsLoginMode","formState","changeHandler","setFormData","name","value","isValid","email","password","submitHandler","event","preventDefault","console","log","inputs","switchModeHandler","prevMode"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,eAAR,EAAyBC,iBAAzB,EAA4CC,mBAA5C,QAAsE,8BAAtE;AACA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AACA,OAAOC,IAAP,MAAiB,2CAAjB;;AAIA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,EAA9C;AAEA,QAAM,CAACW,SAAD,EAAYC,aAAZ,EAA2BC,WAA3B,IACFR,OAAO,CACH;AACIS,IAAAA,IAAI,EAAE;AACFC,MAAAA,KAAK,EAAE,EADL;AAEFC,MAAAA,OAAO,EAAE;AAFP,KADV;AAKIC,IAAAA,KAAK,EAAE;AACHF,MAAAA,KAAK,EAAE,OADJ;AAEHC,MAAAA,OAAO,EAAE;AAFN,KALX;AASIE,IAAAA,QAAQ,EAAE;AACNH,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH;AATd,GADG,EAcA,KAdA,CADX,CAHe,CAsBf;;AACA,QAAMG,aAAa,GAAGC,KAAK,IAAI;AAC3BA,IAAAA,KAAK,CAACC,cAAN,GAD2B,CAE3B;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAS,CAACa,MAAtB;AACH,GAJD;;AAQA,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,QAAI,CAAChB,WAAL,EAAkB;AACdI,MAAAA,WAAW,CACP;AAACC,QAAAA,IAAI,EAAE;AAAP,OADO,EAEPH,SAAS,CAACa,MAAV,CAAiBP,KAAjB,CAAuBD,OAAvB,IACAL,SAAS,CAACa,MAAV,CAAiBN,QAAjB,CAA0BF,OAHnB,CAAX;AAIH,KALD,MAMK;AACDH,MAAAA,WAAW,CAAC,EACR,GAAGF,SAAS,CAACa,MADL;AAERV,QAAAA,IAAI,EAAE;AACFC,UAAAA,KAAK,EAAE,EADL;AAEFC,UAAAA,OAAO,EAAE;AAFP;AAFE,OAAD,EAMR,KANQ,CAAX;AAOH;;AACDN,IAAAA,cAAc,CAACgB,QAAQ,IAAI,CAACA,QAAd,CAAd;AACH,GAjBD;;AAmBA,sBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAA4B,IAAA,QAAQ,EAAEP,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACV,WAAD,iBACG,oBAAC,KAAD;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,EAAE,EAAC,MAFP;AAEc,IAAA,IAAI,EAAC,MAFnB;AAGI,IAAA,KAAK,EAAC,WAHV;AAII,IAAA,UAAU,EAAE,CAACP,iBAAD,CAJhB;AAKI,IAAA,SAAS,EAAC,wBALd;AAMI,IAAA,OAAO,EAAEU,aANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,eAUI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,OAAV;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,KAAK,EAAC,OAHV;AAII,IAAA,UAAU,EAAE,CAACV,iBAAiB,EAAlB,EAAsBD,eAAe,EAArC,CAJhB;AAKI,IAAA,SAAS,EAAC,6BALd;AAMI,IAAA,OAAO,EAAEW,aANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,eAkBI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,UAAV;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,KAAK,EAAC,UAHV;AAII,IAAA,UAAU,EAAE,CAACV,iBAAiB,EAAlB,EAAsBC,mBAAmB,CAAC,GAAD,CAAzC,CAJhB;AAKI,IAAA,SAAS,EAAC,gCALd;AAMI,IAAA,OAAO,EAAES,aANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,eA0BI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACD,SAAS,CAACK,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,WAAW,GAAG,OAAH,GAAa,QAD7B,CA1BJ,CADJ,eA+BI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEgB,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BJ,CADJ;AAmCH,CArFD;;AAuFA,eAAejB,IAAf","sourcesContent":["import React, {useState} from 'react';\nimport {VALIDATOR_EMAIL, VALIDATOR_REQUIRE, VALIDATOR_MAXLENGTH} from '../../shared/util/validators';\nimport Input from '../../shared/components/FormElements/Input';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport Button from '../../shared/components/UIElements/Button';\nimport Card from '../../shared/components/UIElements/Button';\n\n\n\nconst Auth = () => {\n    const [isLoginMode, setIsLoginMode] = useState();\n\n    const [formState, changeHandler, setFormData] = \n        useForm(\n            {\n                name: {\n                    value: '',\n                    isValid: false\n                },\n                email: {\n                    value: 'a@b.c',\n                    isValid: false\n                },\n                password: {\n                    value: '',\n                    isValid: false\n                } \n            }, false\n    );\n\n\n    // send data to the server!\n    const submitHandler = event => {\n        event.preventDefault();\n        // check if json is ok\n        console.log(formState.inputs);\n    };\n\n   \n\n    const switchModeHandler = () => {\n        if (!isLoginMode) {\n            setFormData(\n                {name: 'undefined'}, \n                formState.inputs.email.isValid && \n                formState.inputs.password.isValid);\n        }\n        else {\n            setFormData({\n                ...formState.inputs,\n                name: {\n                    value: '',\n                    isValid: false\n                }\n            }, false);\n        }\n        setIsLoginMode(prevMode => !prevMode);\n    }\n\n    return (\n        <Card>\n            <form className=\"song-form\" onSubmit={submitHandler}>\n                {!isLoginMode && \n                    <Input \n                        element=\"input\" \n                        id=\"name\" type=\"text\" \n                        label=\"Your name\" \n                        validators={[VALIDATOR_REQUIRE]}\n                        errorText=\"Please enter your name\"\n                        onInput={changeHandler} />\n                }\n                <Input id=\"email\"\n                    element=\"input\"\n                    type=\"text\" \n                    label=\"Email\"\n                    validators={[VALIDATOR_REQUIRE(), VALIDATOR_EMAIL()]} \n                    errorText='Please enter a valid email!'\n                    onInput={changeHandler}\n                    /> \n                <Input id=\"password\"\n                    element=\"input\"\n                    type=\"password\" \n                    label=\"Password\"\n                    validators={[VALIDATOR_REQUIRE(), VALIDATOR_MAXLENGTH(100)]} \n                    errorText='Please enter a valid password!'\n                    onInput={changeHandler}\n                    /> \n                <Button type=\"submit\" disabled={!formState.isValid}>\n                    {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n                    </Button>\n            </form>\n            <Button onClick={switchModeHandler}>Switch</Button> \n        </Card>\n    );\n}\n\nexport default Auth;\n\n"]},"metadata":{},"sourceType":"module"}